#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TimAI —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
"""

import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '.')))
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from core.timai_core import TimAI

def test_advanced_timai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç TimAI —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏"""
    
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TimAI —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤...")
    
    # 15-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º)
    df_15m = pd.read_csv('data/historical/BTCUSDT_15m_5years_20210705_20250702.csv')
    df_15m['datetime'] = pd.to_datetime(df_15m['datetime'])
    
    # 5-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)
    df_5m = pd.read_csv('data/historical/BTCUSDT_5m_5years_20210705_20250702.csv')
    df_5m['datetime'] = pd.to_datetime(df_5m['datetime'])
    
    # 60-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
    df_1h = pd.read_csv('data/historical/BTCUSDT_60m_5years_20210705_20250702.csv')
    df_1h['datetime'] = pd.to_datetime(df_1h['datetime'])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ–±—É—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö)
    last_date = df_15m['datetime'].max()
    train_end_date = last_date - timedelta(days=90)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    df_15m_train = df_15m[df_15m['datetime'] < train_end_date].copy()
    df_15m_test = df_15m[df_15m['datetime'] >= train_end_date].copy()
    
    df_5m_train = df_5m[df_5m['datetime'] < train_end_date].copy()
    df_5m_test = df_5m[df_5m['datetime'] >= train_end_date].copy()
    
    df_1h_train = df_1h[df_1h['datetime'] < train_end_date].copy()
    df_1h_test = df_1h[df_1h['datetime'] >= train_end_date].copy()
    
    print(f"üìä –î–∞–Ω–Ω—ã–µ:")
    print(f"   –û–±—É—á–µ–Ω–∏–µ: {df_15m_train['datetime'].min()} - {df_15m_train['datetime'].max()}")
    print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {df_15m_test['datetime'].min()} - {df_15m_test['datetime'].max()}")
    print(f"   15m –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(df_15m_test):,}")
    print(f"   5m –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(df_5m_test):,}")
    print(f"   1h –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(df_1h_test):,}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TimAI
    timai = TimAI()
    
    # –û–±—É—á–∞–µ–º –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüöÄ –û–±—É—á–µ–Ω–∏–µ TimAI –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    results = timai.train(df_15m_train)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    print(f"\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤...")
    df_15m_test = add_advanced_indicators(df_15m_test, "15m")
    df_5m_test = add_advanced_indicators(df_5m_test, "5m")
    df_1h_test = add_advanced_indicators(df_1h_test, "1h")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏...")
    
    confidence_levels = [0.06, 0.10, 0.15, 0.20, 0.25, 0.30]  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –∑–æ–ª–æ—Ç–æ–π —Å–µ—Ä–µ–¥–∏–Ω—ã
    tp_sl_multipliers = [3.5, 4.0, 4.5, 5.0, 5.5, 6.0]  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ TP/SL
    
    best_result = None
    best_config = None
    
    for confidence in confidence_levels:
        for tp_sl_mult in tp_sl_multipliers:
            print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: confidence={confidence}, TP/SL_mult={tp_sl_mult}")
            
            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            predictions_15m, individual_preds_15m = timai.predict(df_15m_test, confidence_threshold=confidence)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ 15m: {np.bincount([max(0, int(p)) for p in predictions_15m])}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
            trading_result = simulate_multi_timeframe_trading(
                df_15m_test, df_5m_test, df_1h_test,
                predictions_15m, confidence, tp_sl_mult
            )
            
            print(f"   –î–æ—Ö–æ–¥: {trading_result['total_return']:.2f}%, –°–¥–µ–ª–∫–∏: {trading_result['trades_count']}, "
                  f"–í–∏–Ω—Ä–µ–π—Ç: {trading_result['win_rate']:.1f}%, –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {trading_result['avg_trade']:.4f}")
            
            if best_result is None or trading_result['total_return'] > best_result['total_return']:
                best_result = trading_result
                best_config = {'confidence': confidence, 'tp_sl_mult': tp_sl_mult}
    
    print(f"\nüèÜ –õ—É—á—à–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: confidence={best_config['confidence']}, TP/SL_mult={best_config['tp_sl_mult']}")
    print(f"üí∞ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   –û–±—â–∏–π –¥–æ—Ö–æ–¥: {best_result['total_return']:.2f}%")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {best_result['trades_count']}")
    print(f"   –í–∏–Ω—Ä–µ–π—Ç: {best_result['win_rate']:.1f}%")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {best_result['avg_trade']:.4f}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {best_result['max_drawdown']:.2f}%")
    print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: {best_result['risk_reward_ratio']:.2f}")
    print(f"   –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥ B&H: {best_result['excess_over_bh']:.2f}%")
    print(f"   –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {best_result['avg_position_size']:.2f}%")
    
    return best_result

def add_advanced_indicators(df, timeframe):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
    
    # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['atr'] = calculate_atr(df, 14)
    df['volatility'] = df['atr'] / df['close']
    
    # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['ema_9'] = df['close'].ewm(span=9).mean()
    df['ema_21'] = df['close'].ewm(span=21).mean()
    df['ema_50'] = df['close'].ewm(span=50).mean()
    df['sma_20'] = df['close'].rolling(20).mean()
    df['sma_50'] = df['close'].rolling(50).mean()
    
    # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
    df['trend_strength'] = abs(df['ema_9'] - df['ema_21']) / df['ema_21']
    df['trend_direction'] = np.where(df['ema_9'] > df['ema_21'], 1, -1)
    df['price_above_ema'] = df['close'] > df['ema_21']
    
    # RSI –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    df['rsi'] = calculate_rsi(df['close'], 14)
    df['rsi_sma'] = df['rsi'].rolling(10).mean()
    
    # Volume –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['volume_sma'] = df['volume'].rolling(20).mean()
    df['volume_ratio'] = df['volume'] / df['volume_sma']
    df['volume_trend'] = df['volume'].rolling(10).mean() / df['volume'].rolling(50).mean()
    
    # Momentum –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['momentum'] = df['close'] / df['close'].shift(10) - 1
    df['momentum_sma'] = df['momentum'].rolling(10).mean()
    
    # Bollinger Bands
    df['bb_upper'] = df['sma_20'] + 2 * df['close'].rolling(20).std()
    df['bb_lower'] = df['sma_20'] - 2 * df['close'].rolling(20).std()
    df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'])
    
    # MACD
    df['macd_line'] = df['close'].ewm(span=12).mean() - df['close'].ewm(span=26).mean()
    df['macd_signal'] = df['macd_line'].ewm(span=9).mean()
    df['macd_histogram'] = df['macd_line'] - df['macd_signal']
    
    # Stochastic
    df['stoch_k'] = calculate_stochastic(df, 14)
    df['stoch_d'] = df['stoch_k'].rolling(3).mean()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    if timeframe == "1h":
        # –ß–∞—Å–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ
        df['trend_filter'] = (df['ema_9'] > df['ema_21']) & (df['ema_21'] > df['ema_50'])
        df['volume_filter'] = df['volume_ratio'] > 1.0
        df['volatility_filter'] = df['volatility'] > 0.005
    elif timeframe == "15m":
        # 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - —É–º–µ—Ä–µ–Ω–Ω—ã–µ
        df['trend_filter'] = df['ema_9'] > df['ema_21']
        df['volume_filter'] = df['volume_ratio'] > 0.8
        df['volatility_filter'] = df['volatility'] > 0.003
    else:  # 5m
        # 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ
        df['trend_filter'] = True  # –õ—é–±–æ–π —Ç—Ä–µ–Ω–¥
        df['volume_filter'] = df['volume_ratio'] > 0.6
        df['volatility_filter'] = df['volatility'] > 0.002
    
    return df

def calculate_atr(df, period):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Average True Range"""
    high = df['high']
    low = df['low']
    close = df['close']
    
    tr1 = high - low
    tr2 = abs(high - close.shift())
    tr3 = abs(low - close.shift())
    
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
    atr = tr.rolling(period).mean()
    
    return atr

def calculate_rsi(prices, period):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI"""
    delta = prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(period).mean()
    rs = gain / (loss + 1e-8)
    rsi = 100 - (100 / (1 + rs))
    return rsi

def calculate_stochastic(df, period):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Stochastic Oscillator"""
    low_min = df['low'].rolling(period).min()
    high_max = df['high'].rolling(period).max()
    k = 100 * (df['close'] - low_min) / (high_max - low_min)
    return k

def simulate_multi_timeframe_trading(df_15m, df_5m, df_1h, predictions_15m, confidence, tp_sl_multiplier):
    """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    initial_balance = 1400  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ $1400
    balance = initial_balance
    max_balance = initial_balance
    trades = []
    position = None
    entry_price = 0
    entry_time = None
    entry_atr = 0
    position_size = 1.0  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 100%
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    df_15m = df_15m.set_index('datetime')
    df_5m = df_5m.set_index('datetime')
    df_1h = df_1h.set_index('datetime')
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    common_times = df_15m.index.intersection(df_5m.index).intersection(df_1h.index)
    
    for i, current_time in enumerate(common_times):
        if i < 100:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–≤–µ—á–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            continue
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        current_15m = df_15m.loc[current_time]
        current_5m = df_5m.loc[current_time]
        current_1h = df_1h.loc[current_time]
        
        current_price = current_15m['close']
        current_atr = current_15m['atr']
        current_volatility = current_15m['volatility']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if position is not None:
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            trend_multiplier = 1.5 if current_1h['trend_strength'] > 0.02 else 1.0
            atr_based_tp = entry_atr * tp_sl_multiplier * trend_multiplier
            atr_based_sl = entry_atr * tp_sl_multiplier * 0.7  # –ë–æ–ª–µ–µ —É–∑–∫–∏–π SL
            
            if position == 'long':
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if current_price <= entry_price - atr_based_sl:
                    profit = -atr_based_sl / entry_price * position_size - 0.0004  # –ö–æ–º–∏—Å—Å–∏—è
                    balance *= (1 + profit)
                    trades.append(profit)
                    position = None
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                elif current_price >= entry_price + atr_based_tp:
                    profit = atr_based_tp / entry_price * position_size - 0.0004  # –ö–æ–º–∏—Å—Å–∏—è
                    balance *= (1 + profit)
                    trades.append(profit)
                    position = None
                # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                elif current_price > entry_price + atr_based_sl:
                    new_sl = current_price - atr_based_sl * 0.5
                    if current_price <= new_sl:
                        profit = (new_sl - entry_price) / entry_price * position_size - 0.0004
                        balance *= (1 + profit)
                        trades.append(profit)
                        position = None
            else:  # short position
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if current_price >= entry_price + atr_based_sl:
                    profit = -atr_based_sl / entry_price * position_size - 0.0004  # –ö–æ–º–∏—Å—Å–∏—è
                    balance *= (1 + profit)
                    trades.append(profit)
                    position = None
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏
                elif current_price <= entry_price - atr_based_tp:
                    profit = atr_based_tp / entry_price * position_size - 0.0004  # –ö–æ–º–∏—Å—Å–∏—è
                    balance *= (1 + profit)
                    trades.append(profit)
                    position = None
                # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏
                elif current_price < entry_price - atr_based_sl:
                    new_sl = current_price + atr_based_sl * 0.5
                    if current_price >= new_sl:
                        profit = (entry_price - new_sl) / entry_price * position_size - 0.0004
                        balance *= (1 + profit)
                        trades.append(profit)
                        position = None
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
        if position is None:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            pred_15m = predictions_15m[i] if i < len(predictions_15m) else 1
            
            # –ó–û–õ–û–¢–ê–Ø –°–ï–†–ï–î–ò–ù–ê - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å—é
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_volatility = current_15m['volatility']
            market_trend = current_1h['trend_strength']
            market_volume = current_15m['volume_ratio']
            
            # –¢–†–ï–ù–î–û–í–´–ï –§–ò–õ–¨–¢–†–´ - –∫–ª—é—á–µ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –Ω–∞ 1-—á–∞—Å–æ–≤–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
            strong_uptrend = (current_1h['ema_9'] > current_1h['ema_21'] > current_1h['ema_50']) and (current_1h['trend_strength'] > 0.015)
            strong_downtrend = (current_1h['ema_9'] < current_1h['ema_21'] < current_1h['ema_50']) and (current_1h['trend_strength'] > 0.015)
            
            # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥ –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
            moderate_uptrend_15m = current_15m['ema_9'] > current_15m['ema_21']
            moderate_downtrend_15m = current_15m['ema_9'] < current_15m['ema_21']
            
            # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π)
            weak_uptrend = current_1h['ema_9'] > current_1h['ema_21'] * 0.998  # –û—á–µ–Ω—å –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫
            weak_downtrend = current_1h['ema_9'] < current_1h['ema_21'] * 1.002  # –û—á–µ–Ω—å –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            if market_volatility > 0.006:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volume_threshold = 0.4  # –û—á–µ–Ω—å –º—è–≥–∫–∏–π –æ–±—ä–µ–º
                volatility_threshold = 0.0008  # –û—á–µ–Ω—å –º—è–≥–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                rsi_long_threshold = 88  # –û—á–µ–Ω—å –º—è–≥–∫–∏–π RSI –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                rsi_short_threshold = 12  # –û—á–µ–Ω—å –º—è–≥–∫–∏–π RSI –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            elif market_volatility > 0.004:  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volume_threshold = 0.5  # –ú—è–≥–∫–∏–π –æ–±—ä–µ–º
                volatility_threshold = 0.0015  # –ú—è–≥–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                rsi_long_threshold = 82  # –ú—è–≥–∫–∏–π RSI
                rsi_short_threshold = 18  # –ú—è–≥–∫–∏–π RSI
            elif market_trend > 0.025:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                volume_threshold = 0.6  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
                volatility_threshold = 0.002  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                rsi_long_threshold = 78  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RSI
                rsi_short_threshold = 22  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RSI
            else:  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                volume_threshold = 0.65  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—ä–µ–º
                volatility_threshold = 0.002  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                rsi_long_threshold = 75  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π RSI
                rsi_short_threshold = 25  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π RSI
            
            # 1. –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
            volume_ok = current_15m['volume_ratio'] > volume_threshold
            volatility_ok = current_15m['volatility'] > volatility_threshold
            
            # 2. RSI —Ñ–∏–ª—å—Ç—Ä—ã (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
            rsi_ok_long = current_15m['rsi'] < rsi_long_threshold
            rsi_ok_short = current_15m['rsi'] > rsi_short_threshold
            
            # 3. –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–û–°–ù–û–í–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï)
            trend_ok_long = strong_uptrend or (moderate_uptrend_15m and current_1h['trend_strength'] > 0.01) or weak_uptrend
            trend_ok_short = strong_downtrend or (moderate_downtrend_15m and current_1h['trend_strength'] > 0.01) or weak_downtrend
            
            # 4. Momentum —Ñ–∏–ª—å—Ç—Ä—ã (–º—è–≥–∫–∏–µ)
            momentum_ok_long = current_15m['momentum_sma'] > -0.003  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π
            momentum_ok_short = current_15m['momentum_sma'] < 0.003   # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π
            
            # 5. MACD —Ñ–∏–ª—å—Ç—Ä—ã (–º—è–≥–∫–∏–µ)
            macd_ok_long = current_15m['macd_histogram'] > -0.0003  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π
            macd_ok_short = current_15m['macd_histogram'] < 0.0003   # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π
            
            # 6. Bollinger Bands —Ñ–∏–ª—å—Ç—Ä—ã (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
            bb_ok_long = current_15m['bb_position'] < 0.88  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π
            bb_ok_short = current_15m['bb_position'] > 0.12  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π
            
            # 7. Stochastic —Ñ–∏–ª—å—Ç—Ä—ã (–º—è–≥–∫–∏–µ)
            stoch_ok_long = current_5m['stoch_k'] < 92  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π
            stoch_ok_short = current_5m['stoch_k'] > 8   # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            signal_strength = 0
            
            if pred_15m == 2:  # Buy signal
                # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
                if volume_ok and volatility_ok and rsi_ok_long and trend_ok_long:
                    signal_strength = 1
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
                    if strong_uptrend:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                        signal_strength += 3
                    elif moderate_uptrend_15m:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
                        signal_strength += 2
                    if momentum_ok_long and macd_ok_long:  # Momentum –∏ MACD –Ω–µ –ø—Ä–æ—Ç–∏–≤
                        signal_strength += 1
                    if bb_ok_long:  # –•–æ—Ä–æ—à–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ BB
                        signal_strength += 1
                    if stoch_ok_long:  # Stochastic –Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
                        signal_strength += 1
                    if current_1h['trend_strength'] > 0.02:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                        signal_strength += 1
                    if current_15m['bb_position'] < 0.35:  # –û–∫–æ–ª–æ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã BB
                        signal_strength += 2
                    if current_5m['stoch_k'] < 35:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞ 5m
                        signal_strength += 1
                    if current_15m['volume_ratio'] > 1.3:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                        signal_strength += 1
                    if current_15m['rsi'] < 35:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                        signal_strength += 1
                    
                    # –í—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
                    if signal_strength >= 2:  # –°–Ω–∏–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        position = 'long'
                        entry_price = current_price
                        entry_time = current_time
                        entry_atr = current_atr
                    
            elif pred_15m == 0:  # Sell signal
                # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
                if volume_ok and volatility_ok and rsi_ok_short and trend_ok_short:
                    signal_strength = 1
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
                    if strong_downtrend:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                        signal_strength += 3
                    elif moderate_downtrend_15m:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
                        signal_strength += 2
                    if momentum_ok_short and macd_ok_short:  # Momentum –∏ MACD –Ω–µ –ø—Ä–æ—Ç–∏–≤
                        signal_strength += 1
                    if bb_ok_short:  # –•–æ—Ä–æ—à–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ BB
                        signal_strength += 1
                    if stoch_ok_short:  # Stochastic –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
                        signal_strength += 1
                    if current_1h['trend_strength'] > 0.02:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                        signal_strength += 1
                    if current_15m['bb_position'] > 0.65:  # –û–∫–æ–ª–æ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã BB
                        signal_strength += 2
                    if current_5m['stoch_k'] > 65:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 5m
                        signal_strength += 1
                    if current_15m['volume_ratio'] > 1.3:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                        signal_strength += 1
                    if current_15m['rsi'] > 65:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                        signal_strength += 1
                    
                    # –í—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
                    if signal_strength >= 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
                        position = 'short'
                        entry_price = current_price
                        entry_time = current_time
                        entry_atr = current_atr
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
        max_balance = max(max_balance, balance)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
    if position is not None:
        final_price = df_15m.iloc[-1]['close']
        if position == 'long':
            profit = (final_price - entry_price) / entry_price * position_size - 0.0004
        else:
            profit = (entry_price - final_price) / entry_price * position_size - 0.0004
        balance *= (1 + profit)
        trades.append(profit)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_return = (balance - initial_balance) / initial_balance * 100
    win_rate = len([t for t in trades if t > 0]) / len(trades) * 100 if trades else 0
    avg_trade = np.mean(trades) if trades else 0
    max_drawdown = (max_balance - balance) / max_balance * 100
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    winning_trades = [t for t in trades if t > 0]
    losing_trades = [t for t in trades if t < 0]
    avg_win = np.mean(winning_trades) if winning_trades else 0
    avg_loss = np.mean(losing_trades) if losing_trades else 0
    risk_reward_ratio = abs(avg_win / avg_loss) if avg_loss != 0 else 0
    
    # Buy & Hold –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    buy_hold_return = (df_15m['close'].iloc[-1] - df_15m['close'].iloc[0]) / df_15m['close'].iloc[0] * 100
    excess_over_bh = total_return - buy_hold_return
    
    # –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è
    avg_position_size = np.mean([abs(t) for t in trades]) * 100 if trades else 0
    
    return {
        'total_return': total_return,
        'win_rate': win_rate,
        'trades_count': len(trades),
        'avg_trade': avg_trade,
        'max_drawdown': max_drawdown,
        'risk_reward_ratio': risk_reward_ratio,
        'buy_hold_return': buy_hold_return,
        'excess_over_bh': excess_over_bh,
        'final_balance': balance,
        'avg_position_size': avg_position_size
    }

if __name__ == "__main__":
    results = test_advanced_timai() 