#!/usr/bin/env python3
"""
üåê TimAI Trading API
FastAPI REST API –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã TimAI
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import pandas as pd
import numpy as np
import json
import os
from datetime import datetime
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TimAI
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from core.timai_core import TimAI, XGBOOST_AVAILABLE, LIGHTGBM_AVAILABLE

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="TimAI Trading API",
    description="Advanced Multi-Model Trading System API",
    version="2.0.0"
)

# CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TimAI
timai_instance = None
training_status = {"is_training": False, "status": "ready", "progress": 0}

# Pydantic –º–æ–¥–µ–ª–∏
class MarketData(BaseModel):
    timestamp: str
    open: float
    high: float
    low: float
    close: float
    volume: float

class PredictionRequest(BaseModel):
    market_data: List[MarketData]
    ensemble_method: Optional[str] = "weighted_voting"

class PredictionResponse(BaseModel):
    predictions: List[int]
    individual_predictions: Dict[str, List[int]]
    confidence_scores: Dict[str, float]
    timestamp: str

class TrainingRequest(BaseModel):
    data_file: Optional[str] = "data/historical/BTCUSDT_15m_5years_20210705_20250702.csv"

class SystemStatus(BaseModel):
    is_trained: bool
    available_models: List[str]
    model_performance: Dict[str, Any]
    xgboost_available: bool
    lightgbm_available: bool
    last_training: Optional[str]

@app.get("/", response_model=Dict[str, str])
async def root():
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    return {
        "name": "TimAI Trading API",
        "version": "2.0.0",
        "description": "Advanced Multi-Model Trading System",
        "status": "running"
    }

@app.get("/status", response_model=SystemStatus)
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã TimAI"""
    global timai_instance
    
    available_models = []
    model_performance = {}
    is_trained = False
    last_training = None
    
    if timai_instance:
        is_trained = timai_instance.is_trained
        if is_trained:
            available_models = list(timai_instance.model_manager.models.keys())
            model_performance = timai_instance.model_manager.model_performance
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –æ–±—É—á–µ–Ω–∏—è
            model_files = []
            if os.path.exists("models/production"):
                model_files = [f for f in os.listdir("models/production") if f.endswith("_meta.json")]
                if model_files:
                    latest_file = max(model_files, key=lambda f: os.path.getctime(os.path.join("models/production", f)))
                    last_training = latest_file.split("_")[-2] + "_" + latest_file.split("_")[-1].replace("_meta.json", "")
    
    return SystemStatus(
        is_trained=is_trained,
        available_models=available_models,
        model_performance=model_performance,
        xgboost_available=XGBOOST_AVAILABLE,
        lightgbm_available=LIGHTGBM_AVAILABLE,
        last_training=last_training
    )

@app.get("/models", response_model=Dict[str, Any])
async def get_available_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    global timai_instance
    
    if not timai_instance or not timai_instance.is_trained:
        raise HTTPException(status_code=400, detail="TimAI –Ω–µ –æ–±—É—á–µ–Ω–∞")
    
    models_info = {}
    
    for name, performance in timai_instance.model_manager.model_performance.items():
        if performance['status'] == 'success':
            models_info[name] = {
                "f1_score": round(performance['cv_f1_mean'], 3),
                "f1_std": round(performance['cv_f1_std'], 3),
                "training_time": round(performance['training_time'], 1),
                "feature_importance": len(timai_instance.model_manager.feature_importance.get(name, {}))
            }
    
    return {
        "models": models_info,
        "total_models": len(models_info),
        "best_model": max(models_info.items(), key=lambda x: x[1]['f1_score'])[0] if models_info else None
    }

@app.post("/train")
async def train_system(request: TrainingRequest, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ TimAI –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    global timai_instance, training_status
    
    if training_status["is_training"]:
        raise HTTPException(status_code=400, detail="–û–±—É—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
    
    if not os.path.exists(request.data_file):
        raise HTTPException(status_code=404, detail=f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {request.data_file}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(train_timai_background, request.data_file)
    
    return {
        "message": "–û–±—É—á–µ–Ω–∏–µ TimAI –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
        "data_file": request.data_file,
        "check_status": "/training-status"
    }

async def train_timai_background(data_file: str):
    """–§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ TimAI"""
    global timai_instance, training_status
    
    try:
        training_status = {"is_training": True, "status": "loading_data", "progress": 10}
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_csv(data_file)
        training_status = {"is_training": True, "status": "initializing", "progress": 20}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TimAI
        timai_instance = TimAI()
        training_status = {"is_training": True, "status": "training", "progress": 30}
        
        # –û–±—É—á–µ–Ω–∏–µ
        results = timai_instance.train(df)
        training_status = {"is_training": True, "status": "saving", "progress": 90}
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        training_status = {
            "is_training": False, 
            "status": "completed", 
            "progress": 100,
            "results": results,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        training_status = {
            "is_training": False, 
            "status": "failed", 
            "progress": 0,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/training-status")
async def get_training_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
    return training_status

@app.post("/predict", response_model=PredictionResponse)
async def predict(request: PredictionRequest):
    """–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é TimAI"""
    global timai_instance
    
    if not timai_instance or not timai_instance.is_trained:
        raise HTTPException(status_code=400, detail="TimAI –Ω–µ –æ–±—É—á–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        data_dict = []
        for item in request.market_data:
            data_dict.append({
                "datetime": item.timestamp,
                "open": item.open,
                "high": item.high,
                "low": item.low,
                "close": item.close,
                "volume": item.volume
            })
        
        df = pd.DataFrame(data_dict)
        df['datetime'] = pd.to_datetime(df['datetime'])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions, individual_preds = timai_instance.predict(df, request.ensemble_method)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence scores
        confidence_scores = {}
        for model_name, model_preds in individual_preds.items():
            # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ä–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            unique_preds = np.unique(model_preds)
            if len(unique_preds) == 1:
                confidence_scores[model_name] = 1.0
            else:
                most_common = np.bincount(model_preds).max()
                confidence_scores[model_name] = most_common / len(model_preds)
        
        return PredictionResponse(
            predictions=predictions.tolist(),
            individual_predictions={name: preds.tolist() for name, preds in individual_preds.items()},
            confidence_scores=confidence_scores,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")

@app.get("/feature-importance/{model_name}")
async def get_feature_importance(model_name: str, top_n: int = 20):
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    global timai_instance
    
    if not timai_instance or not timai_instance.is_trained:
        raise HTTPException(status_code=400, detail="TimAI –Ω–µ –æ–±—É—á–µ–Ω–∞")
    
    if model_name not in timai_instance.model_manager.feature_importance:
        raise HTTPException(status_code=404, detail=f"Feature importance –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    importance_dict = timai_instance.model_manager.feature_importance[model_name]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    sorted_features = sorted(importance_dict.items(), key=lambda x: x[1], reverse=True)[:top_n]
    
    return {
        "model_name": model_name,
        "feature_importance": [{"feature": name, "importance": round(value, 4)} for name, value in sorted_features],
        "total_features": len(importance_dict)
    }

@app.get("/market-analysis")
async def get_market_analysis():
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    global timai_instance
    
    if not timai_instance or not timai_instance.is_trained:
        raise HTTPException(status_code=400, detail="TimAI –Ω–µ –æ–±—É—á–µ–Ω–∞")
    
    # –≠—Ç–æ –¥–µ–º–æ-—Ñ—É–Ω–∫—Ü–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv("data/historical/BTCUSDT_15m_5years_20210705_20250702.csv")
        recent_data = df.tail(100)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions, individual_preds = timai_instance.predict(recent_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        pred_counts = np.bincount(predictions)
        total_preds = len(predictions)
        
        analysis = {
            "market_sentiment": {
                "strong_sell": int(pred_counts[0]) if len(pred_counts) > 0 else 0,
                "hold": int(pred_counts[1]) if len(pred_counts) > 1 else 0,
                "strong_buy": int(pred_counts[2]) if len(pred_counts) > 2 else 0
            },
            "dominant_signal": "hold",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "confidence": 0.0,
            "models_agreement": 0.0,
            "timestamp": datetime.now().isoformat()
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
        if len(pred_counts) > 0:
            dominant_class = np.argmax(pred_counts)
            signal_names = ["strong_sell", "hold", "strong_buy"]
            analysis["dominant_signal"] = signal_names[dominant_class]
            analysis["confidence"] = float(pred_counts[dominant_class] / total_preds)
        
        # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
        if individual_preds:
            agreements = []
            for i in range(len(predictions)):
                model_preds_at_i = [preds[i] for preds in individual_preds.values()]
                agreement = sum(1 for pred in model_preds_at_i if pred == predictions[i]) / len(model_preds_at_i)
                agreements.append(agreement)
            analysis["models_agreement"] = float(np.mean(agreements))
        
        return analysis
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {str(e)}")

@app.post("/load-model")
async def load_saved_model(model_timestamp: str):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å TimAI"""
    global timai_instance
    
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
        model_dir = "models/production"
        if not os.path.exists(model_dir):
            raise HTTPException(status_code=404, detail="–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        timai_instance = TimAI()
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        
        return {
            "message": f"–ú–æ–¥–µ–ª—å {model_timestamp} –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
            "status": "success"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "timai_trained": timai_instance.is_trained if timai_instance else False,
        "available_endpoints": [
            "/", "/status", "/models", "/train", "/predict", 
            "/feature-importance/{model}", "/market-analysis", "/health"
        ]
    }

if __name__ == "__main__":
    import uvicorn
    
    print("üåê –ó–∞–ø—É—Å–∫ TimAI Trading API...")
    print("üìç Swagger UI: http://localhost:8000/docs")
    print("üìç ReDoc: http://localhost:8000/redoc")
    
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True) 