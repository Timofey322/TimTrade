"""
–ê–Ω–∞–ª–∏–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
- –í–ª–∏—è–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ –∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
"""

import sys
import os
from pathlib import Path
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from loguru import logger
import yaml

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(str(Path(__file__).parent / "src"))

from data_collection.collector import DataCollector
from preprocessing.adaptive_indicators import AdaptiveIndicatorSelector
from preprocessing.feature_engineering import FeatureEngineer


class AdaptiveVolatilityAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.
    """
    
    def __init__(self, config_path: str = "config/config.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
        self.config_path = config_path
        self.config = self._load_config()
        self.logger = logger.bind(name="VolatilityAnalyzer")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_collector = DataCollector(self.config)
        self.selector = AdaptiveIndicatorSelector(self.config.get('adaptive_indicators', {}))
        self.feature_engineer = FeatureEngineer(self.config.get('preprocessing', {}))
    
    def _load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as file:
                return yaml.safe_load(file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def load_real_data(self, symbol: str = 'BTC/USDT', limit: int = 50000) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
            
            data = self.data_collector.fetch_ohlcv_with_history(
                symbol=symbol,
                timeframe='5m',
                target_limit=limit,
                batch_size=1000
            )
            
            if data is None or data.empty:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            self.logger.info(f"   –ü–µ—Ä–∏–æ–¥: {data.index[0]} - {data.index[-1]}")
            
            return data
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def analyze_volatility_multipliers(self, data: pd.DataFrame) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏...")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            multipliers = self.selector._calculate_adaptive_volatility_multipliers(data)
            
            if not multipliers:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª–∏")
            
            fall_mult = multipliers['fall']
            rise_mult = multipliers['rise']
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            analysis = {
                'fall_multiplier': {
                    'mean': fall_mult.mean(),
                    'std': fall_mult.std(),
                    'min': fall_mult.min(),
                    'max': fall_mult.max(),
                    'median': fall_mult.median(),
                    'q25': fall_mult.quantile(0.25),
                    'q75': fall_mult.quantile(0.75)
                },
                'rise_multiplier': {
                    'mean': rise_mult.mean(),
                    'std': rise_mult.std(),
                    'min': rise_mult.min(),
                    'max': rise_mult.max(),
                    'median': rise_mult.median(),
                    'q25': rise_mult.quantile(0.25),
                    'q75': rise_mult.quantile(0.75)
                }
            }
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            self.logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π:")
            self.logger.info(f"   –ü–∞–¥–µ–Ω–∏–µ: —Å—Ä–µ–¥–Ω–µ–µ={analysis['fall_multiplier']['mean']:.3f}, "
                           f"—Å—Ç–¥={analysis['fall_multiplier']['std']:.3f}")
            self.logger.info(f"   –†–æ—Å—Ç: —Å—Ä–µ–¥–Ω–µ–µ={analysis['rise_multiplier']['mean']:.3f}, "
                           f"—Å—Ç–¥={analysis['rise_multiplier']['std']:.3f}")
            
            return analysis, multipliers
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π: {e}")
            raise
    
    def analyze_market_conditions(self, data: pd.DataFrame, multipliers: dict) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏."""
        try:
            self.logger.info("üåä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è...")
            
            returns = data['close'].pct_change()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            market_metrics = {
                'volatility': returns.rolling(20).std().reindex(data.index).fillna(returns.std()),
                'trend': ((data['close'].rolling(20).mean() - data['close'].rolling(50).mean()) / 
                         data['close'].rolling(50).mean()).reindex(data.index).fillna(0),
                'volume_ratio': (data['volume'] / data['volume'].rolling(20).mean()).reindex(data.index).fillna(1.0)
            }
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏
            correlations = {}
            for metric_name, metric_values in market_metrics.items():
                fall_corr = np.corrcoef(multipliers['fall'].dropna(), metric_values.dropna())[0, 1]
                rise_corr = np.corrcoef(multipliers['rise'].dropna(), metric_values.dropna())[0, 1]
                
                correlations[metric_name] = {
                    'fall_correlation': fall_corr,
                    'rise_correlation': rise_corr
                }
            
            self.logger.info("üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏:")
            for metric, corr in correlations.items():
                self.logger.info(f"   {metric}: –ø–∞–¥–µ–Ω–∏–µ={corr['fall_correlation']:.3f}, —Ä–æ—Å—Ç={corr['rise_correlation']:.3f}")
            
            return market_metrics, correlations
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            raise
    
    def analyze_target_distribution(self, data: pd.DataFrame, horizon: int = 12) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π."""
        try:
            self.logger.info(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç: {horizon})...")
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            target = self.selector._create_target_variable(data, horizon)
            
            if target is None or target.empty:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            target_dist = target.value_counts()
            target_stats = {
                'distribution': target_dist.to_dict(),
                'total_samples': len(target),
                'class_balance': {
                    'fall_ratio': target_dist.get(0, 0) / len(target),
                    'hold_ratio': target_dist.get(1, 0) / len(target),
                    'rise_ratio': target_dist.get(2, 0) / len(target)
                }
            }
            
            self.logger.info("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:")
            self.logger.info(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {target_stats['total_samples']}")
            self.logger.info(f"   –ü–∞–¥–µ–Ω–∏–µ (0): {target_dist.get(0, 0)} ({target_stats['class_balance']['fall_ratio']:.1%})")
            self.logger.info(f"   –ë–æ–∫–æ–≤–∏–∫ (1): {target_dist.get(1, 0)} ({target_stats['class_balance']['hold_ratio']:.1%})")
            self.logger.info(f"   –†–æ—Å—Ç (2): {target_dist.get(2, 0)} ({target_stats['class_balance']['rise_ratio']:.1%})")
            
            return target_stats, target
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {e}")
            raise
    
    def create_visualizations(self, data: pd.DataFrame, multipliers: dict, 
                            market_metrics: dict, target: pd.Series, save_path: str = "volatility_analysis"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            self.logger.info("üìä –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            os.makedirs(save_path, exist_ok=True)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
            plt.style.use('seaborn-v0_8')
            fig, axes = plt.subplots(2, 2, figsize=(15, 12))
            fig.suptitle('–ê–Ω–∞–ª–∏–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏', fontsize=16, fontweight='bold')
            
            # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
            ax1 = axes[0, 0]
            ax1.hist(multipliers['fall'], bins=50, alpha=0.7, label='–ü–∞–¥–µ–Ω–∏–µ', color='red')
            ax1.hist(multipliers['rise'], bins=50, alpha=0.7, label='–†–æ—Å—Ç', color='green')
            ax1.set_xlabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏')
            ax1.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # 2. –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
            ax2 = axes[0, 1]
            sample_size = min(1000, len(multipliers['fall']))
            sample_indices = np.linspace(0, len(multipliers['fall'])-1, sample_size, dtype=int)
            
            ax2.plot(data.index[sample_indices], multipliers['fall'].iloc[sample_indices], 
                    label='–ü–∞–¥–µ–Ω–∏–µ', color='red', alpha=0.7)
            ax2.plot(data.index[sample_indices], multipliers['rise'].iloc[sample_indices], 
                    label='–†–æ—Å—Ç', color='green', alpha=0.7)
            ax2.set_xlabel('–í—Ä–µ–º—è')
            ax2.set_ylabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å')
            ax2.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            
            # 3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
            ax3 = axes[1, 0]
            vol_sample = market_metrics['volatility'].iloc[sample_indices]
            fall_sample = multipliers['fall'].iloc[sample_indices]
            rise_sample = multipliers['rise'].iloc[sample_indices]
            
            ax3.scatter(vol_sample, fall_sample, alpha=0.6, color='red', label='–ü–∞–¥–µ–Ω–∏–µ')
            ax3.scatter(vol_sample, rise_sample, alpha=0.6, color='green', label='–†–æ—Å—Ç')
            ax3.set_xlabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å')
            ax3.set_ylabel('–ú–Ω–æ–∂–∏—Ç–µ–ª—å')
            ax3.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å vs –ú–Ω–æ–∂–∏—Ç–µ–ª–∏')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
            
            # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            ax4 = axes[1, 1]
            target_dist = target.value_counts()
            colors = ['red', 'gray', 'green']
            labels = ['–ü–∞–¥–µ–Ω–∏–µ', '–ë–æ–∫–æ–≤–∏–∫', '–†–æ—Å—Ç']
            
            ax4.bar(labels, [target_dist.get(0, 0), target_dist.get(1, 0), target_dist.get(2, 0)], 
                   color=colors, alpha=0.7)
            ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax4.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
            ax4.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, v in enumerate([target_dist.get(0, 0), target_dist.get(1, 0), target_dist.get(2, 0)]):
                ax4.text(i, v + max(target_dist.values()) * 0.01, str(v), ha='center', va='bottom')
            
            plt.tight_layout()
            plt.savefig(f"{save_path}/volatility_analysis.png", dpi=300, bbox_inches='tight')
            plt.close()
            
            self.logger.info(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {save_path}/volatility_analysis.png")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
    
    def generate_report(self, analysis_results: dict, save_path: str = "volatility_analysis"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É."""
        try:
            self.logger.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
            
            os.makedirs(save_path, exist_ok=True)
            
            report = f"""
# –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π

### –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–∞–¥–µ–Ω–∏—è
- –°—Ä–µ–¥–Ω–µ–µ: {analysis_results['multiplier_stats']['fall_multiplier']['mean']:.3f}
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {analysis_results['multiplier_stats']['fall_multiplier']['std']:.3f}
- –ú–∏–Ω–∏–º—É–º: {analysis_results['multiplier_stats']['fall_multiplier']['min']:.3f}
- –ú–∞–∫—Å–∏–º—É–º: {analysis_results['multiplier_stats']['fall_multiplier']['max']:.3f}
- –ú–µ–¥–∏–∞–Ω–∞: {analysis_results['multiplier_stats']['fall_multiplier']['median']:.3f}

### –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞
- –°—Ä–µ–¥–Ω–µ–µ: {analysis_results['multiplier_stats']['rise_multiplier']['mean']:.3f}
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {analysis_results['multiplier_stats']['rise_multiplier']['std']:.3f}
- –ú–∏–Ω–∏–º—É–º: {analysis_results['multiplier_stats']['rise_multiplier']['min']:.3f}
- –ú–∞–∫—Å–∏–º—É–º: {analysis_results['multiplier_stats']['rise_multiplier']['max']:.3f}
- –ú–µ–¥–∏–∞–Ω–∞: {analysis_results['multiplier_stats']['rise_multiplier']['median']:.3f}

## –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏

"""
            
            for metric, corr in analysis_results['correlations'].items():
                report += f"### {metric.replace('_', ' ').title()}\n"
                report += f"- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø–∞–¥–µ–Ω–∏–µ–º: {corr['fall_correlation']:.3f}\n"
                report += f"- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä–æ—Å—Ç–æ–º: {corr['rise_correlation']:.3f}\n\n"
            
            report += f"""
## –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

- –í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {analysis_results['target_stats']['total_samples']}
- –ü–∞–¥–µ–Ω–∏–µ: {analysis_results['target_stats']['distribution'].get(0, 0)} ({analysis_results['target_stats']['class_balance']['fall_ratio']:.1%})
- –ë–æ–∫–æ–≤–∏–∫: {analysis_results['target_stats']['distribution'].get(1, 0)} ({analysis_results['target_stats']['class_balance']['hold_ratio']:.1%})
- –†–æ—Å—Ç: {analysis_results['target_stats']['distribution'].get(2, 0)} ({analysis_results['target_stats']['class_balance']['rise_ratio']:.1%})

## –í—ã–≤–æ–¥—ã

1. **–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å**: –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è –æ—Ç {analysis_results['multiplier_stats']['fall_multiplier']['min']:.3f} –¥–æ {analysis_results['multiplier_stats']['fall_multiplier']['max']:.3f}, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.

2. **–ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤**: –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–µ–µ—Ç {len(analysis_results['target_stats']['distribution'])} –∫–ª–∞—Å—Å–æ–≤ —Å —Ä–∞–∑—É–º–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º.

3. **–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è**: –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.
"""
            
            with open(f"{save_path}/analysis_report.md", 'w', encoding='utf-8') as f:
                f.write(report)
            
            self.logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {save_path}/analysis_report.md")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def run_full_analysis(self, symbol: str = 'BTC/USDT', limit: int = 50000):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π...")
            
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.load_real_data(symbol, limit)
            
            # 2. –ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
            multiplier_stats, multipliers = self.analyze_volatility_multipliers(data)
            
            # 3. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            market_metrics, correlations = self.analyze_market_conditions(data, multipliers)
            
            # 4. –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            target_stats, target = self.analyze_target_distribution(data)
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            self.create_visualizations(data, multipliers, market_metrics, target)
            
            # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            analysis_results = {
                'multiplier_stats': multiplier_stats,
                'correlations': correlations,
                'target_stats': target_stats
            }
            self.generate_report(analysis_results)
            
            self.logger.info("üéâ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            return analysis_results
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.remove()
        logger.add(sys.stderr, level="INFO", 
                  format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = AdaptiveVolatilityAnalyzer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        results = analyzer.run_full_analysis()
        
        print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'volatility_analysis'")
        print("   - volatility_analysis.png (–≥—Ä–∞—Ñ–∏–∫–∏)")
        print("   - analysis_report.md (–æ—Ç—á–µ—Ç)")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 