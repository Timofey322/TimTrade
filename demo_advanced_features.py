#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏—á–µ–π: On-chain –º–µ—Ç—Ä–∏–∫–∏ –∏ Sentiment –∞–Ω–∞–ª–∏–∑
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import yaml
import os
import sys
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º
sys.path.append('src')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from data_collection.onchain_collector import OnChainCollector
from data_collection.sentiment_collector import SentimentCollector  
from preprocessing.advanced_features import AdvancedFeatureEngine

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    try:
        with open('config/advanced_features_config.yaml', 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        logger.warning("–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return {}

def demonstrate_onchain_metrics():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å on-chain –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    print("\n" + "="*80)
    print("üêã –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ON-CHAIN –ú–ï–¢–†–ò–ö")
    print("="*80)
    
    config = load_config()
    collector = OnChainCollector(config.get('api_keys', {}))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–∂–µ–Ω–∏—è—Ö –∫–∏—Ç–æ–≤...")
    whale_data = collector.get_whale_movements('BTC', days=30)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(whale_data)} –∑–∞–ø–∏—Å–µ–π –æ –¥–≤–∏–∂–µ–Ω–∏—è—Ö –∫–∏—Ç–æ–≤")
    print(whale_data.head())
    
    print("\nüí± –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç–æ–∫–∞—Ö –±–∏—Ä–∂...")
    flows_data = collector.get_exchange_flows('BTC', days=30)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(flows_data)} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Ç–æ–∫–∞—Ö –±–∏—Ä–∂")
    print(flows_data.head())
    
    print("\nüåê –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    network_data = collector.get_network_activity('BTC', days=30)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(network_data)} –∑–∞–ø–∏—Å–µ–π –æ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print(network_data.head())
    
    print("\nüíé –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ HODLers...")
    hodler_data = collector.get_hodler_behavior('BTC', days=30)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(hodler_data)} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ HODLers")
    print(hodler_data.head())
    
    # Composite score
    all_data = {
        'whale_movements': whale_data,
        'exchange_flows': flows_data,
        'network_activity': network_data,
        'hodler_behavior': hodler_data
    }
    
    composite_score = collector.calculate_onchain_sentiment_score(all_data)
    print(f"\nüéØ Composite On-Chain Sentiment Score: {composite_score.iloc[0]:.3f}")
    
    return all_data

def demonstrate_sentiment_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É sentiment –∞–Ω–∞–ª–∏–∑–∞."""
    print("\n" + "="*80)
    print("üò± –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø SENTIMENT –ê–ù–ê–õ–ò–ó–ê")
    print("="*80)
    
    config = load_config()
    collector = SentimentCollector(config.get('api_keys', {}))
    
    # Fear & Greed Index
    print("\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ Fear & Greed Index...")
    fear_greed = collector.get_fear_greed_index(days=30)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(fear_greed)} –∑–∞–ø–∏—Å–µ–π Fear & Greed Index")
    if not fear_greed.empty:
        latest_fg = fear_greed.iloc[-1]
        print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {latest_fg['value']} ({latest_fg['value_classification']})")
    
    # Bybit Opportunities
    print("\nüéØ –ü–∞—Ä—Å–∏–Ω–≥ Bybit Market Opportunities...")
    bybit_data = collector.get_bybit_opportunities()
    print("–î–∞–Ω–Ω—ã–µ Bybit Opportunities:")
    for key, value in bybit_data.items():
        if key != 'timestamp':
            print(f"  {key}: {value}")
    
    # Social Sentiment
    print("\nüì± –ü–æ–ª—É—á–µ–Ω–∏–µ Social Sentiment...")
    social_sentiment = collector.get_social_sentiment('bitcoin', days=7)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(social_sentiment)} –∑–∞–ø–∏—Å–µ–π social sentiment")
    if not social_sentiment.empty:
        avg_sentiment = social_sentiment['social_sentiment'].mean()
        print(f"–°—Ä–µ–¥–Ω–∏–π social sentiment: {avg_sentiment:.3f}")
    
    # News Sentiment
    print("\nüì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ News Sentiment...")
    news_sentiment = collector.get_news_sentiment('bitcoin', days=7)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(news_sentiment)} –∑–∞–ø–∏—Å–µ–π news sentiment")
    if not news_sentiment.empty:
        avg_news = news_sentiment['avg_sentiment'].mean()
        print(f"–°—Ä–µ–¥–Ω–∏–π news sentiment: {avg_news:.3f}")
    
    # Funding Rates
    print("\nüí∞ –ê–Ω–∞–ª–∏–∑ Funding Rates...")
    funding_data = collector.get_funding_rates_sentiment(['BTCUSDT', 'ETHUSDT'])
    print("Funding Rates Sentiment:")
    print(funding_data)
    
    # Composite Sentiment Score
    print("\nüéØ –†–∞—Å—á–µ—Ç Composite Sentiment Score...")
    composite_score = collector.calculate_composite_sentiment_score(
        fear_greed, social_sentiment, news_sentiment, bybit_data, funding_data
    )
    print(f"Composite Sentiment Score: {composite_score:.3f}")
    
    return {
        'fear_greed': fear_greed,
        'bybit_data': bybit_data,
        'social_sentiment': social_sentiment,
        'news_sentiment': news_sentiment,
        'funding_data': funding_data,
        'composite_score': composite_score
    }

def demonstrate_advanced_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏—á–µ–π."""
    print("\n" + "="*80)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ADVANCED FEATURE ENGINEERING")
    print("="*80)
    
    config = load_config()
    feature_engine = AdvancedFeatureEngine(config)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    dates = pd.date_range(end=datetime.now(), periods=60, freq='D')
    np.random.seed(42)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ BTC
    base_price = 45000
    returns = np.random.normal(0.001, 0.03, 60)  # –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç 0.1% –≤ –¥–µ–Ω—å, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 3%
    prices = [base_price]
    
    for ret in returns[1:]:
        prices.append(prices[-1] * (1 + ret))
    
    price_df = pd.DataFrame({
        'timestamp': dates,
        'open': prices,
        'high': [p * (1 + abs(np.random.normal(0, 0.015))) for p in prices],
        'low': [p * (1 - abs(np.random.normal(0, 0.015))) for p in prices],
        'close': prices,
        'volume': np.random.uniform(20000, 80000, 60)
    })
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(price_df)} –¥–Ω–µ–π —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print(f"–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${price_df['close'].iloc[0]:,.0f} –¥–æ ${price_df['close'].iloc[-1]:,.0f}")
    
    # –°–æ–∑–¥–∞–µ–º on-chain —Ñ–∏—á–∏
    print("\nüêã –°–æ–∑–¥–∞–Ω–∏–µ On-Chain —Ñ–∏—á–µ–π...")
    onchain_features = feature_engine.create_onchain_features('BTC', days=60)
    print(f"–°–æ–∑–¥–∞–Ω–æ {onchain_features.shape[1]-1} on-chain —Ñ–∏—á–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º sentiment —Ñ–∏—á–∏
    print("\nüò± –°–æ–∑–¥–∞–Ω–∏–µ Sentiment —Ñ–∏—á–µ–π...")
    sentiment_features = feature_engine.create_sentiment_features('BTC', days=60)
    print(f"–°–æ–∑–¥–∞–Ω–æ {sentiment_features.shape[1]-1} sentiment —Ñ–∏—á–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏—á–µ–π
    print("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏—á–µ–π...")
    comprehensive_features = feature_engine.create_comprehensive_features('BTC', price_df, days=60)
    print(f"–ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {comprehensive_features.shape[1]} —Ñ–∏—á–µ–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∏—á–µ–π
    print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∏—á–µ–π:")
    feature_columns = [col for col in comprehensive_features.columns if col != 'timestamp']
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∏—á–∏ –ø–æ —Ç–∏–ø–∞–º
    onchain_cols = [col for col in feature_columns if any(x in col.lower() for x in ['whale', 'exchange', 'network', 'hodler', 'onchain'])]
    sentiment_cols = [col for col in feature_columns if any(x in col.lower() for x in ['sentiment', 'fear', 'greed', 'social', 'news', 'bybit'])]
    correlation_cols = [col for col in feature_columns if 'corr_' in col]
    other_cols = [col for col in feature_columns if col not in onchain_cols + sentiment_cols + correlation_cols]
    
    print(f"\nüêã On-Chain —Ñ–∏—á–∏ ({len(onchain_cols)}):")
    for col in onchain_cols[:5]:
        latest_value = comprehensive_features[col].iloc[-1]
        print(f"  ‚Ä¢ {col}: {latest_value:.4f}")
    
    print(f"\nüò± Sentiment —Ñ–∏—á–∏ ({len(sentiment_cols)}):")
    for col in sentiment_cols[:5]:
        latest_value = comprehensive_features[col].iloc[-1]
        print(f"  ‚Ä¢ {col}: {latest_value:.4f}")
    
    print(f"\nüîó Correlation —Ñ–∏—á–∏ ({len(correlation_cols)}):")
    for col in correlation_cols[:3]:
        latest_value = comprehensive_features[col].iloc[-1]
        print(f"  ‚Ä¢ {col}: {latest_value:.4f}")
    
    # –ö–ª—é—á–µ–≤—ã–µ composite scores
    print(f"\nüéØ –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
    if 'onchain_composite_score' in comprehensive_features.columns:
        onchain_score = comprehensive_features['onchain_composite_score'].iloc[-1]
        print(f"  ‚Ä¢ On-Chain Composite Score: {onchain_score:.3f}")
    
    if 'sentiment_composite_score' in comprehensive_features.columns:
        sentiment_score = comprehensive_features['sentiment_composite_score'].iloc[-1]
        print(f"  ‚Ä¢ Sentiment Composite Score: {sentiment_score:.3f}")
    
    if 'fundamental_strength' in comprehensive_features.columns:
        fundamental_score = comprehensive_features['fundamental_strength'].iloc[-1]
        print(f"  ‚Ä¢ Fundamental Strength: {fundamental_score:.3f}")
    
    # Market regime
    if all(col in comprehensive_features.columns for col in ['market_regime_bullish', 'market_regime_bearish', 'market_regime_neutral']):
        regime_bullish = comprehensive_features['market_regime_bullish'].iloc[-1]
        regime_bearish = comprehensive_features['market_regime_bearish'].iloc[-1]
        regime_neutral = comprehensive_features['market_regime_neutral'].iloc[-1]
        
        if regime_bullish:
            regime = "üêÇ –ë–´–ß–ò–ô"
        elif regime_bearish:
            regime = "üêª –ú–ï–î–í–ï–ñ–ò–ô"
        else:
            regime = "üòê –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô"
            
        print(f"  ‚Ä¢ Market Regime: {regime}")
    
    return comprehensive_features

def create_visualization(comprehensive_features):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("\n" + "="*80)
    print("üìä –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô")
    print("="*80)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        plt.style.use('seaborn-v0_8-darkgrid')
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle('üöÄ Advanced Features: On-Chain & Sentiment Analysis', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –¶–µ–Ω–∞ –∏ On-Chain Score
        if 'close' in comprehensive_features.columns and 'onchain_composite_score' in comprehensive_features.columns:
            ax1 = axes[0, 0]
            ax1_twin = ax1.twinx()
            
            dates = comprehensive_features['timestamp']
            price = comprehensive_features['close']
            onchain = comprehensive_features['onchain_composite_score']
            
            line1 = ax1.plot(dates, price, 'b-', linewidth=2, label='BTC Price', alpha=0.8)
            line2 = ax1_twin.plot(dates, onchain, 'r-', linewidth=2, label='On-Chain Score', alpha=0.8)
            
            ax1.set_xlabel('Date')
            ax1.set_ylabel('BTC Price ($)', color='b')
            ax1_twin.set_ylabel('On-Chain Score', color='r')
            ax1.set_title('üêã Price vs On-Chain Metrics')
            ax1.tick_params(axis='y', labelcolor='b')
            ax1_twin.tick_params(axis='y', labelcolor='r')
            ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: Sentiment Components
        ax2 = axes[0, 1]
        sentiment_cols = [col for col in comprehensive_features.columns if 'sentiment' in col.lower() and 'composite' not in col.lower()]
        
        if sentiment_cols:
            for i, col in enumerate(sentiment_cols[:3]):  # –ü–µ—Ä–≤—ã–µ 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                values = comprehensive_features[col].rolling(7).mean()  # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
                ax2.plot(comprehensive_features['timestamp'], values, 
                        linewidth=2, label=col.replace('_', ' ').title(), alpha=0.8)
            
            ax2.set_xlabel('Date')
            ax2.set_ylabel('Sentiment Score')
            ax2.set_title('üò± Sentiment Components')
            ax2.legend(fontsize=8)
            ax2.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: Correlation Heatmap
        ax3 = axes[1, 0]
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∏—á–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        key_features = []
        if 'close' in comprehensive_features.columns:
            key_features.append('close')
        
        feature_cols = comprehensive_features.columns.tolist()
        important_cols = [col for col in feature_cols if any(keyword in col.lower() 
                         for keyword in ['composite', 'whale', 'fear_greed', 'social', 'fundamental'])]
        
        key_features.extend(important_cols[:8])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
        if len(key_features) > 1:
            corr_data = comprehensive_features[key_features].corr()
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
            mask = np.triu(np.ones_like(corr_data, dtype=bool))
            
            im = ax3.imshow(corr_data, cmap='RdBu_r', aspect='auto', vmin=-1, vmax=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã
            for i in range(len(corr_data)):
                for j in range(len(corr_data)):
                    if not mask[i, j]:
                        text = ax3.text(j, i, f'{corr_data.iloc[i, j]:.2f}',
                                      ha="center", va="center", color="black", fontsize=8)
            
            ax3.set_xticks(range(len(key_features)))
            ax3.set_yticks(range(len(key_features)))
            ax3.set_xticklabels([col.replace('_', '\n') for col in key_features], 
                               rotation=45, ha='right', fontsize=8)
            ax3.set_yticklabels([col.replace('_', '\n') for col in key_features], fontsize=8)
            ax3.set_title('üîó Feature Correlations')
            
            # –î–æ–±–∞–≤–ª—è–µ–º colorbar
            cbar = plt.colorbar(im, ax=ax3, shrink=0.8)
            cbar.set_label('Correlation', fontsize=8)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: Market Regime Distribution
        ax4 = axes[1, 1]
        
        regime_cols = [col for col in comprehensive_features.columns if 'market_regime' in col]
        if regime_cols:
            regime_counts = []
            regime_labels = []
            
            for col in regime_cols:
                count = comprehensive_features[col].sum()
                regime_counts.append(count)
                
                if 'bullish' in col:
                    regime_labels.append('üêÇ Bullish')
                elif 'bearish' in col:
                    regime_labels.append('üêª Bearish')
                else:
                    regime_labels.append('üòê Neutral')
            
            colors = ['green', 'red', 'gray']
            wedges, texts, autotexts = ax4.pie(regime_counts, labels=regime_labels, 
                                               colors=colors, autopct='%1.1f%%', 
                                               startangle=90)
            ax4.set_title('üìä Market Regime Distribution')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        output_path = 'advanced_features_demo.png'
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ " + "="*78)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("üöÄ " + "="*78)
    print("üìà On-Chain –º–µ—Ç—Ä–∏–∫–∏: –¥–≤–∏–∂–µ–Ω–∏—è –∫–∏—Ç–æ–≤, –ø–æ—Ç–æ–∫–∏ –±–∏—Ä–∂, —Å–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    print("üò± Sentiment –∞–Ω–∞–ª–∏–∑: Fear & Greed, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –Ω–æ–≤–æ—Å—Ç–∏, Bybit")
    print("üîó Cross-correlation –∞–Ω–∞–ª–∏–∑ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ fundamentals")
    print("üéØ Composite scoring –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        onchain_data = demonstrate_onchain_metrics()
        sentiment_data = demonstrate_sentiment_analysis()
        comprehensive_features = demonstrate_advanced_features()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        create_visualization(comprehensive_features)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*80)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*80)
        
        total_features = comprehensive_features.shape[1] - 1  # –ò—Å–∫–ª—é—á–∞–µ–º timestamp
        
        onchain_features = len([col for col in comprehensive_features.columns 
                               if any(x in col.lower() for x in ['whale', 'exchange', 'network', 'hodler', 'onchain'])])
        
        sentiment_features = len([col for col in comprehensive_features.columns 
                                 if any(x in col.lower() for x in ['sentiment', 'fear', 'greed', 'social', 'news', 'bybit'])])
        
        correlation_features = len([col for col in comprehensive_features.columns if 'corr_' in col])
        
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∏—á–µ–π: {total_features}")
        print(f"  üêã On-Chain —Ñ–∏—á–∏: {onchain_features}")
        print(f"  üò± Sentiment —Ñ–∏—á–∏: {sentiment_features}")
        print(f"  üîó Correlation —Ñ–∏—á–∏: {correlation_features}")
        print(f"  üéØ –ü—Ä–æ—á–∏–µ —Ñ–∏—á–∏: {total_features - onchain_features - sentiment_features - correlation_features}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
        print("1. üîë –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è:")
        print("   ‚Ä¢ Glassnode (on-chain –¥–∞–Ω–Ω—ã–µ): https://glassnode.com/")
        print("   ‚Ä¢ Twitter Developer (social sentiment): https://developer.twitter.com/")
        print("   ‚Ä¢ News API (news sentiment): https://newsapi.org/")
        
        print("\n2. ‚öôÔ∏è  –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ config/advanced_features_config.yaml")
        
        print("\n3. üéØ –î–æ–±–∞–≤—å—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É:")
        print("   ‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ AdvancedFeatureEngine –≤ feature_engineering.py")
        print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ composite scores –≤ confidence_scorer.py")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ market regime –¥–ª—è risk management")
        
        print("\n4. üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
        print("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ correlation breaks –∫–∞–∫ —Å–∏–≥–Ω–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sentiment extremes –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Ä–∏–∞–Ω—Å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print("   ‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ on-chain –∏ sentiment –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 