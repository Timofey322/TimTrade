#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ binary classification
"""

import sys
import pandas as pd
import numpy as np
from sklearn.utils.class_weight import compute_class_weight
from sklearn.metrics import classification_report, confusion_matrix
import yaml
import logging

sys.path.append('src')

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/model_improvement.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    try:
        with open('config/smart_adaptive_config.yaml', 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return {}

def convert_to_binary_signals(signals):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç 3-–∫–ª–∞—Å—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ binary.
    
    Args:
        signals: Series —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (0=hold, 1=buy, 2=sell)
    
    Returns:
        Series —Å binary —Å–∏–≥–Ω–∞–ª–∞–º–∏ (0=no_action, 1=action)
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º: 0->0 (no action), 1->1 (buy), 2->1 (sell)
    binary_signals = signals.copy()
    binary_signals[signals == 2] = 1  # sell —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è action
    binary_signals[signals == 1] = 1  # buy –æ—Å—Ç–∞–µ—Ç—Å—è action
    binary_signals[signals == 0] = 0  # hold –æ—Å—Ç–∞–µ—Ç—Å—è no_action
    
    return binary_signals

def analyze_class_distribution(signals, timeframe):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤."""
    logger = logging.getLogger(__name__)
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    original_dist = signals.value_counts().sort_index()
    logger.info(f"\\nüìä {timeframe} - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
    for class_val, count in original_dist.items():
        percentage = (count / len(signals)) * 100
        logger.info(f"  –ö–ª–∞—Å—Å {class_val}: {count:,} ({percentage:.1f}%)")
    
    # Binary —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    binary_signals = convert_to_binary_signals(signals)
    binary_dist = binary_signals.value_counts().sort_index()
    logger.info(f"\\nüìä {timeframe} - Binary —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
    for class_val, count in binary_dist.items():
        action_type = "no_action" if class_val == 0 else "action"
        percentage = (count / len(binary_signals)) * 100
        logger.info(f"  {action_type} ({class_val}): {count:,} ({percentage:.1f}%)")
    
    return original_dist, binary_dist

def calculate_class_weights(signals):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Å–∞ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏."""
    logger = logging.getLogger(__name__)
    
    # –í–µ—Å–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    original_classes = np.unique(signals)
    original_weights = compute_class_weight(
        'balanced', 
        classes=original_classes, 
        y=signals
    )
    original_weight_dict = dict(zip(original_classes, original_weights))
    
    # –í–µ—Å–∞ –¥–ª—è binary –∫–ª–∞—Å—Å–æ–≤
    binary_signals = convert_to_binary_signals(signals)
    binary_classes = np.unique(binary_signals)
    binary_weights = compute_class_weight(
        'balanced', 
        classes=binary_classes, 
        y=binary_signals
    )
    binary_weight_dict = dict(zip(binary_classes, binary_weights))
    
    logger.info(f"\\n‚öñÔ∏è –í–µ—Å–∞ –∫–ª–∞—Å—Å–æ–≤:")
    logger.info(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ: {original_weight_dict}")
    logger.info(f"  Binary: {binary_weight_dict}")
    
    return original_weight_dict, binary_weight_dict

def update_model_config_for_binary(config):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –¥–ª—è binary classification."""
    logger = logging.getLogger(__name__)
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    models_config = config.get('models', {}).get('ensemble', {})
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    improved_config = {
        'ensemble': {
            'enabled': True,
            'use_binary_classification': True,  # –ù–û–í–û–ï!
            'class_balancing': 'balanced',      # –ù–û–í–û–ï!
            
            # XGBoost –¥–ª—è binary classification
            'xgboost': {
                'n_estimators': 500,            # –£–≤–µ–ª–∏—á–µ–Ω–æ
                'max_depth': 8,                 # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è binary
                'learning_rate': 0.03,          # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                'subsample': 0.85,              # –£–ª—É—á—à–µ–Ω–æ
                'colsample_bytree': 0.85,       # –£–ª—É—á—à–µ–Ω–æ
                'scale_pos_weight': 'auto',     # –ù–û–í–û–ï: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
                'random_state': 42,
                'n_jobs': -1,
                'eval_metric': 'auc'            # –ù–û–í–û–ï: –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è binary
            },
            
            # Random Forest –¥–ª—è binary classification
            'random_forest': {
                'n_estimators': 400,            # –£–≤–µ–ª–∏—á–µ–Ω–æ
                'max_depth': 25,                # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è binary
                'min_samples_split': 2,         # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                'min_samples_leaf': 1,          
                'max_features': 'sqrt',         # –ù–û–í–û–ï: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∏—á–µ–π
                'class_weight': 'balanced',     # –ù–û–í–û–ï: –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤
                'random_state': 42,
                'n_jobs': -1
            },
            
            # LightGBM –¥–ª—è binary classification
            'lightgbm': {
                'objective': 'binary',          # –ù–û–í–û–ï: binary objective
                'n_estimators': 500,            # –£–≤–µ–ª–∏—á–µ–Ω–æ
                'max_depth': 10,                
                'learning_rate': 0.03,          # –°–Ω–∏–∂–µ–Ω–æ
                'num_leaves': 40,               # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                'class_weight': 'balanced',     # –ù–û–í–û–ï: –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤
                'random_state': 42,
                'n_jobs': -1,
                'force_col_wise': True,
                'metric': 'auc'                 # –ù–û–í–û–ï: –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è binary
            }
        }
    }
    
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è binary classification")
    return improved_config

def create_improved_signal_generation_strategy():
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    logger = logging.getLogger(__name__)
    
    strategy = {
        'signal_generation': {
            # Binary decision making
            'binary_classification': True,
            
            # Threshold –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
            'action_threshold': 0.65,       # –ü–æ—Ä–æ–≥ –¥–ª—è "action" –∫–ª–∞—Å—Å–∞
            'confidence_threshold': 0.70,   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π confidence
            
            # Post-processing –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
            'action_type_determination': {
                'use_technical_context': True,
                'use_sentiment_context': True,
                
                # –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è buy/sell
                'buy_indicators': [
                    'price_above_sma_20',
                    'rsi_oversold_recovery',
                    'macd_bullish_crossover',
                    'positive_sentiment',
                    'bullish_regime'
                ],
                
                'sell_indicators': [
                    'price_below_sma_20',
                    'rsi_overbought',
                    'macd_bearish_crossover',
                    'negative_sentiment',
                    'bearish_regime'
                ]
            },
            
            # –§–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            'quality_filters': {
                'min_volume_confirmation': 0.6,
                'min_indicator_agreement': 0.65,
                'max_volatility_percentile': 90,
                'min_sentiment_stability': 0.5
            }
        }
    }
    
    logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
    return strategy

def simulate_binary_accuracy_improvement():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ binary classification."""
    logger = logging.getLogger(__name__)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (3-–∫–ª–∞—Å—Å)
    current_accuracy = 0.32  # 32% –∫–∞–∫ –≤ –ª–æ–≥–∞—Ö
    current_random = 0.333   # 33.3% —Å–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è 3 –∫–ª–∞—Å—Å–æ–≤
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (binary)
    binary_random = 0.50     # 50% —Å–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è 2 –∫–ª–∞—Å—Å–æ–≤
    expected_improvement = 0.15  # –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
    expected_binary_accuracy = current_accuracy + expected_improvement
    
    logger.info(f"\\nüéØ –û–ñ–ò–î–ê–ï–ú–û–ï –£–õ–£–ß–®–ï–ù–ò–ï –¢–û–ß–ù–û–°–¢–ò:")
    logger.info(f"  –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (3-–∫–ª–∞—Å—Å): {current_accuracy*100:.1f}%")
    logger.info(f"  –°–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (3-–∫–ª–∞—Å—Å): {current_random*100:.1f}%")
    logger.info(f"  –°–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (binary): {binary_random*100:.1f}%")
    logger.info(f"  –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (binary): {expected_binary_accuracy*100:.1f}%")
    logger.info(f"  –£–ª—É—á—à–µ–Ω–∏–µ: +{expected_improvement*100:.1f}%")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    advantages = [
        "‚úÖ –ë–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã",
        "‚úÖ –õ—É—á—à–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π", 
        "‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (AUC)",
        "‚úÖ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "‚úÖ –ú–µ–Ω—å—à–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è",
        "‚úÖ –õ—É—á—à–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"
    ]
    
    logger.info(f"\\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
    for advantage in advantages:
        logger.info(f"  {advantage}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger = setup_logging()
    logger.info("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ò–Ø –¢–û–ß–ù–û–°–¢–ò –ú–û–î–ï–õ–ï–ô")
    
    print("=" * 80)
    print("üîß –ê–ù–ê–õ–ò–ó –ò –£–õ–£–ß–®–ï–ù–ò–ï –¢–û–ß–ù–û–°–¢–ò –ú–û–î–ï–õ–ï–ô")
    print("=" * 80)
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –±—ã –¥–∞–Ω–Ω—ã–µ)
    logger.info("\\nüìä –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –ù–ò–ó–ö–û–ô –¢–û–ß–ù–û–°–¢–ò:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
    simulated_distributions = {
        '5m':  {0: 51100, 1: 95177, 2: 53674},  # –ò–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
        '15m': {0: 45542, 1: 106310, 2: 47929}, # –ò–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
        '1h':  {0: 13809, 1: 39778, 2: 15128}   # –ò–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
    }
    
    for timeframe, dist in simulated_distributions.items():
        total = sum(dist.values())
        logger.info(f"\\n{timeframe} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
        for class_val, count in dist.items():
            class_name = {0: 'hold', 1: 'buy', 2: 'sell'}[class_val]
            percentage = (count / total) * 100
            logger.info(f"  {class_name}: {count:,} ({percentage:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        max_class = max(dist.values())
        min_class = min(dist.values())
        imbalance_ratio = max_class / min_class
        logger.info(f"  ‚ö†Ô∏è –î–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤: {imbalance_ratio:.1f}:1")
    
    # 3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
    logger.info(f"\\nüéØ –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´:")
    
    # 3.1 Binary classification
    logger.info("\\n1Ô∏è‚É£ –ü–ï–†–ï–•–û–î –ù–ê BINARY CLASSIFICATION:")
    logger.info("  ‚Ä¢ –û–±—ä–µ–¥–∏–Ω—è–µ–º buy(1) –∏ sell(2) –≤ action(1)")
    logger.info("  ‚Ä¢ hold(0) –æ—Å—Ç–∞–µ—Ç—Å—è no_action(0)")
    logger.info("  ‚Ä¢ –£–ª—É—á—à–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤")
    
    # 3.2 –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    improved_models_config = update_model_config_for_binary(config)
    
    # 3.3 –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    improved_strategy = create_improved_signal_generation_strategy()
    
    # 3.4 –°–∏–º—É–ª—è—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π
    simulate_binary_accuracy_improvement()
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        improved_config = config.copy()
        improved_config['models'] = improved_models_config
        improved_config.update(improved_strategy)
        
        with open('config/smart_adaptive_config_accuracy_improved.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(improved_config, f, default_flow_style=False, allow_unicode=True)
        
        logger.info("\\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        logger.info("  üìÅ config/smart_adaptive_config_accuracy_improved.yaml")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\\n" + "=" * 80)
    print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø IMPLEMENTATION:")
    print("=" * 80)
    
    recommendations = [
        "1. üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ binary classification (action vs no_action)",
        "2. ‚öñÔ∏è –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ class balancing (balanced weights)",
        "3. üìä –î–æ–±–∞–≤—å—Ç–µ AUC –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞",
        "4. üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ post-processing –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è buy/sell",
        "5. üîß –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Å—Ç–∏–º–∞—Ç–æ—Ä–æ–≤ –≤ –º–æ–¥–µ–ª—è—Ö",
        "6. üìà –î–æ–±–∞–≤—å—Ç–µ gradient boosting —Å –º–µ–Ω—å—à–∏–º learning rate",
        "7. üé™ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ cross-validation –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞",
        "8. üì± –î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ model drift",
        "9. üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "10. üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ feature importance –¥–ª—è binary –∑–∞–¥–∞—á–∏"
    ]
    
    for rec in recommendations:
        print(f"  {rec}")
    
    print("\\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("üöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

if __name__ == "__main__":
    main() 