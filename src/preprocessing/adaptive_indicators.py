"""
–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional
from loguru import logger
import itertools
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—ç—à –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
from .indicator_cache import IndicatorCache


class AdaptiveIndicatorSelector:
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """
    
    def __init__(self, config: Dict = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        self.config = config or {}
        self.logger = logger.bind(name="AdaptiveIndicatorSelector")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
        cache_dir = self.config.get('cache_dir', 'models/indicator_cache')
        self.cache = IndicatorCache(cache_dir)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.prediction_horizons = {
            '5m': 12,   # 12 —Å–≤–µ—á–µ–π –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            '15m': 10,  # 10 —Å–≤–µ—á–µ–π –¥–ª—è 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            '1h': 8,    # 8 —Å–≤–µ—á–µ–π –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            '4h': 6,    # 6 —Å–≤–µ—á–µ–π –¥–ª—è 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            '1d': 5     # 5 —Å–≤–µ—á–µ–π –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        }
        
        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.indicator_library = {
            'rsi': {
                'function': self._calculate_rsi,
                'params': [7, 10, 14, 21, 30]
            },
            'macd': {
                'function': self._calculate_macd,
                'params': [
                    (8, 21, 5), (10, 23, 7), (12, 26, 9), (15, 30, 12)
                ]
            },
            'bollinger': {
                'function': self._calculate_bollinger_bands,
                'params': [
                    (10, 1.5), (15, 2.0), (20, 2.0), (25, 2.5)
                ]
            },
            'sma': {
                'function': self._calculate_sma,
                'params': [5, 10, 15, 20, 30, 50, 100, 200]
            },
            'ema': {
                'function': self._calculate_ema,
                'params': [5, 10, 15, 20, 30, 50, 100]
            },
            'stochastic': {
                'function': self._calculate_stochastic,
                'params': [7, 14, 21]
            },
            'williams_r': {
                'function': self._calculate_williams_r,
                'params': [7, 14, 21]
            },
            'cci': {
                'function': self._calculate_cci,
                'params': [10, 20, 30]
            },
            'adx': {
                'function': self._calculate_adx,
                'params': [10, 14, 20]
            },
            'atr': {
                'function': self._calculate_atr,
                'params': [7, 14, 21]
            },
            'obv': {
                'function': self._calculate_obv,
                'params': [None]  # OBV –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∞
            },
            'vwap': {
                'function': self._calculate_vwap,
                'params': [None]  # VWAP –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∞
            },
            # –ù–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
            'momentum': {
                'function': self._calculate_momentum,
                'params': [10, 14, 20]
            },
            'ichimoku': {
                'function': self._calculate_ichimoku,
                'params': [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            },
            'hull_ma': {
                'function': self._calculate_hull_ma,
                'params': [5, 10, 20, 50]
            },
            'awesome_oscillator': {
                'function': self._calculate_awesome_oscillator,
                'params': [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            },
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
            'ultimate_oscillator': {
                'function': self._calculate_ultimate_oscillator,
                'params': [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            },
            'bulls_bears_power': {
                'function': self._calculate_bulls_bears_power,
                'params': [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            },
            'fast_stochastic_rsi': {
                'function': self._calculate_fast_stochastic_rsi,
                'params': [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            }
        }
        
        # –õ—É—á—à–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
        self.best_indicators = {}
        self.optimization_results = {}
    
    def optimize_indicators(self, data: pd.DataFrame, timeframe: str = '5m', 
                          symbol: str = "BTC_USDT", force_recalculate: bool = False) -> Dict:
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ OHLCV
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            force_recalculate: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ª—É—á—à–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        try:
            self.logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {timeframe}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç
            if not force_recalculate:
                cached_results = self.cache.load_optimization_results(timeframe, symbol)
                if cached_results:
                    self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {symbol}_{timeframe}")
                    self.logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {symbol}_{timeframe}")
                    self.best_indicators[timeframe] = cached_results.get('best_combination', [])
                    self.optimization_results[timeframe] = cached_results
                    return cached_results
            
            # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            self.logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è {symbol}_{timeframe}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            prediction_horizon = self.prediction_horizons.get(timeframe, 12)
            self.logger.info(f"–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {prediction_horizon} —Å–≤–µ—á–µ–π")
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            target_data = self._create_target_variable(data, prediction_horizon)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            indicator_combinations = self._generate_indicator_combinations()
            
            best_score = 0
            best_combination = None
            results = []
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            for i, combination in enumerate(indicator_combinations):
                if i % 10 == 0:
                    self.logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é {i+1}/{len(indicator_combinations)}")
                
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    test_data = self._add_indicators(data.copy(), combination)
                    
                    if test_data is None or test_data.empty:
                        continue
                    
                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                    score = self._evaluate_indicator_combination(test_data, target_data)
                    
                    results.append({
                        'combination': combination,
                        'score': score,
                        'indicator_count': len(combination)
                    })
                    
                    if score > best_score:
                        best_score = score
                        best_combination = combination
                        
                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            if best_combination:
                self.best_indicators[timeframe] = best_combination
                self.optimization_results[timeframe] = {
                    'best_combination': best_combination,
                    'best_score': best_score,
                    'prediction_horizon': prediction_horizon,
                    'all_results': results
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
                self.cache.save_optimization_results(timeframe, self.optimization_results[timeframe], symbol)
                
                self.logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ—É—á—à–∏–π score: {best_score:.4f}")
                self.logger.info(f"–õ—É—á—à–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {best_combination}")
                
                return self.optimization_results[timeframe]
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                return {}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    def get_cached_results_info(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—ç—à–µ
        """
        return self.cache.get_cache_info()
    
    def get_best_cached_results(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ª—É—á—à–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        return self.cache.get_best_results()
    
    def clear_cache(self) -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        
        Returns:
            True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        return self.cache.clear_cache()
    
    def _create_target_variable(self, data: pd.DataFrame, horizon: int) -> pd.Series:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞.
        
        Args:
            data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Å–≤–µ—á–∞—Ö
            
        Returns:
            –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (0=–ø–∞–¥–µ–Ω–∏–µ, 1=–±–æ–∫–æ–≤–∏–∫, 2=—Ä–æ—Å—Ç)
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±—É–¥—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            future_returns = data['close'].shift(-horizon) / data['close'] - 1
            
            # –ù–û–í–û–ï: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_multipliers = self._calculate_adaptive_volatility_multipliers(data)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = data['close'].pct_change().rolling(20).std()
            fall_threshold = -volatility * volatility_multipliers['fall']
            rise_threshold = volatility * volatility_multipliers['rise']
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            target = pd.Series(1, index=data.index)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ–∫–æ–≤–∏–∫
            
            # –ü–∞–¥–µ–Ω–∏–µ
            target[future_returns < fall_threshold] = 0
            
            # –†–æ—Å—Ç
            target[future_returns > rise_threshold] = 2
            
            # –£–¥–∞–ª—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
            target = target.dropna()
            
            return target
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {e}")
            return pd.Series()
    
    def _calculate_adaptive_volatility_multipliers(self, data: pd.DataFrame) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
        
        Args:
            data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ –¥–ª—è –ø–∞–¥–µ–Ω–∏—è –∏ —Ä–æ—Å—Ç–∞
        """
        try:
            # –ë–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            base_fall_multiplier = 1.5
            base_rise_multiplier = 1.5
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            returns = data['close'].pct_change()
            
            # 1. –¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π
            current_vol = returns.rolling(20).std().reindex(data.index).fillna(returns.std())
            historical_vol = returns.rolling(100).std().reindex(data.index).fillna(returns.std())
            vol_ratio = (current_vol / historical_vol).reindex(data.index).fillna(1.0)
            
            # 2. –¢—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞
            short_ma = data['close'].rolling(20).mean().reindex(data.index).fillna(method='bfill')
            long_ma = data['close'].rolling(50).mean().reindex(data.index).fillna(method='bfill')
            trend_strength = ((short_ma - long_ma) / long_ma).reindex(data.index).fillna(0)
            
            # 3. –ê—Å–∏–º–º–µ—Ç—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π (–±—ã—á–∏–π/–º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫)
            positive_returns = returns[returns > 0]
            negative_returns = returns[returns < 0]
            if len(positive_returns) > 0 and len(negative_returns) > 0:
                pos_vol = positive_returns.rolling(20).std().reindex(data.index).fillna(returns.std())
                neg_vol = negative_returns.rolling(20).std().reindex(data.index).fillna(returns.std())
                asymmetry_ratio = (pos_vol / neg_vol).reindex(data.index).fillna(1.0)
            else:
                asymmetry_ratio = pd.Series(1.0, index=data.index)
            
            # 4. –û–±—ä–µ–º–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            volume_ma = data['volume'].rolling(20).mean().reindex(data.index).fillna(method='bfill')
            volume_ratio = (data['volume'] / volume_ma).reindex(data.index).fillna(1.0)
            
            # 5. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å —Ä—ã–Ω–∫–∞)
            vol_of_vol = current_vol.rolling(20).std().reindex(data.index).fillna(current_vol.std())
            vol_of_vol_normalized = (vol_of_vol / current_vol).reindex(data.index).fillna(0.3)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
            vol_ratio = vol_ratio.fillna(1.0)
            trend_strength = trend_strength.fillna(0.0)
            
            # –ù–û–í–û–ï: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            fall_multiplier = pd.Series(base_fall_multiplier, index=data.index)
            rise_multiplier = pd.Series(base_rise_multiplier, index=data.index)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            vol_adjustment = np.where(vol_ratio > 1.2, 0.8,  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏
                            np.where(vol_ratio < 0.8, 1.3,   # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –ø–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥–∏
                            1.0))  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
            trend_adjustment = np.where(trend_strength > 0.02, 1.1,  # –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                              np.where(trend_strength < -0.02, 0.9,  # –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                              1.0))  # –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏
            asymmetry_adjustment = np.where(asymmetry_ratio > 1.1, 1.1,  # –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫
                                  np.where(asymmetry_ratio < 0.9, 0.9,   # –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫
                                  1.0))  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞
            volume_adjustment = np.where(volume_ratio > 1.5, 0.9,  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º - —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏
                               np.where(volume_ratio < 0.7, 1.2,   # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º - –ø–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥–∏
                               1.0))  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            vol_of_vol_adjustment = np.where(vol_of_vol_normalized > 0.5, 0.8,  # –í—ã—Å–æ–∫–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å
                                   np.where(vol_of_vol_normalized < 0.2, 1.2,   # –ù–∏–∑–∫–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å
                                   1.0))  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            fall_multiplier = fall_multiplier * vol_adjustment * trend_adjustment * asymmetry_adjustment * volume_adjustment * vol_of_vol_adjustment
            rise_multiplier = rise_multiplier * vol_adjustment * trend_adjustment * asymmetry_adjustment * volume_adjustment * vol_of_vol_adjustment
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            fall_multiplier = fall_multiplier.clip(0.5, 3.0)
            rise_multiplier = rise_multiplier.clip(0.5, 3.0)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
            avg_fall_mult = fall_multiplier.mean()
            avg_rise_mult = rise_multiplier.mean()
            
            self.logger.info(f"–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:")
            self.logger.info(f"  –ü–∞–¥–µ–Ω–∏–µ: {avg_fall_mult:.2f} (–¥–∏–∞–ø–∞–∑–æ–Ω: {fall_multiplier.min():.2f}-{fall_multiplier.max():.2f})")
            self.logger.info(f"  –†–æ—Å—Ç: {avg_rise_mult:.2f} (–¥–∏–∞–ø–∞–∑–æ–Ω: {rise_multiplier.min():.2f}-{rise_multiplier.max():.2f})")
            
            return {
                'fall': fall_multiplier,
                'rise': rise_multiplier
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                'fall': pd.Series(1.5, index=data.index),
                'rise': pd.Series(1.5, index=data.index)
            }
    
    def _generate_indicator_combinations(self) -> List[List]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        """
        combinations = []
        
        # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
        base_indicators = ['rsi', 'macd', 'bollinger', 'sma', 'ema']
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        additional_indicators = ['stochastic', 'williams_r', 'cci', 'adx', 'atr', 'obv', 'vwap']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        for size in range(3, 8):  # –û—Ç 3 –¥–æ 7 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            for base_combo in itertools.combinations(base_indicators, min(size-2, len(base_indicators))):
                remaining_slots = size - len(base_combo)
                
                if remaining_slots > 0:
                    for additional_combo in itertools.combinations(additional_indicators, remaining_slots):
                        combination = list(base_combo) + list(additional_combo)
                        combinations.append(combination)
                else:
                    combinations.append(list(base_combo))
        
        return combinations[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    def _add_indicators(self, data: pd.DataFrame, combination: List) -> pd.DataFrame:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ
            combination: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            
        Returns:
            DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            for indicator_name in combination:
                if indicator_name in self.indicator_library:
                    indicator_info = self.indicator_library[indicator_name]
                    params = indicator_info['params']
                    
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if params and params[0] is not None:
                        if isinstance(params[0], tuple):
                            data = indicator_info['function'](data, *params[0])
                        else:
                            data = indicator_info['function'](data, params[0])
                    else:
                        data = indicator_info['function'](data)
            
            # –£–¥–∞–ª—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
            data = data.dropna()
            
            return data
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return pd.DataFrame()
    
    def _evaluate_indicator_combination(self, data: pd.DataFrame, target: pd.Series) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            target: –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            
        Returns:
            –û—Ü–µ–Ω–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (0-1)
        """
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
            feature_columns = data.select_dtypes(include=[np.number]).columns
            feature_columns = [col for col in feature_columns if col not in ['open', 'high', 'low', 'close', 'volume']]
            
            if len(feature_columns) < 3:
                return 0.0
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫ –æ–¥–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
            common_index = data.index.intersection(target.index)
            if len(common_index) < 100:
                return 0.0
            
            X = data.loc[common_index, feature_columns]
            y = target.loc[common_index]
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RandomForest
            from sklearn.model_selection import train_test_split
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
            
            model = RandomForestClassifier(n_estimators=50, random_state=42)
            model.fit(X_train, y_train)
            
            y_pred = model.predict(X_test)
            accuracy = accuracy_score(y_test, y_pred)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            feature_importance = np.mean(model.feature_importances_)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            score = 0.7 * accuracy + 0.3 * feature_importance
            
            return score
            
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {e}")
            return 0.0
    
    def get_best_indicators(self, timeframe: str = '5m') -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞.
        
        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ª—É—á—à–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        return self.best_indicators.get(timeframe, {})
    
    def add_best_indicators(self, data: pd.DataFrame, timeframe: str = '5m') -> pd.DataFrame:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ OHLCV
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            DataFrame —Å –ª—É—á—à–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            if timeframe not in self.best_indicators:
                self.logger.warning(f"–ù–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {timeframe}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ")
                return self._add_basic_indicators(data)
            
            best_combo = self.best_indicators[timeframe]
            return self._add_indicators(data, best_combo)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return self._add_basic_indicators(data)
    
    def _add_basic_indicators(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ OHLCV
            
        Returns:
            DataFrame —Å –±–∞–∑–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            # RSI
            data = self._calculate_rsi(data, 14)
            
            # MACD
            data = self._calculate_macd(data, 12, 26, 9)
            
            # Bollinger Bands
            data = self._calculate_bollinger_bands(data, 20, 2.0)
            
            # SMA
            data = self._calculate_sma(data, 20)
            data = self._calculate_sma(data, 50)
            
            # EMA
            data = self._calculate_ema(data, 20)
            data = self._calculate_ema(data, 50)
            
            return data.dropna()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return data
    
    # –ú–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    def _calculate_rsi(self, df: pd.DataFrame, period: int = 14) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç RSI."""
        try:
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            df[f'rsi_{period}'] = rsi
            return df
        except:
            return df
    
    def _calculate_macd(self, df: pd.DataFrame, fast: int = 12, slow: int = 26, signal: int = 9) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç MACD."""
        try:
            ema_fast = df['close'].ewm(span=fast).mean()
            ema_slow = df['close'].ewm(span=slow).mean()
            macd_line = ema_fast - ema_slow
            signal_line = macd_line.ewm(span=signal).mean()
            histogram = macd_line - signal_line
            
            df['macd_line'] = macd_line
            df['macd_signal'] = signal_line
            df['macd_histogram'] = histogram
            return df
        except:
            return df
    
    def _calculate_bollinger_bands(self, df: pd.DataFrame, period: int = 20, std_dev: float = 2) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Bollinger Bands."""
        try:
            sma = df['close'].rolling(window=period).mean()
            std = df['close'].rolling(window=period).std()
            upper = sma + (std * std_dev)
            lower = sma - (std * std_dev)
            bandwidth = (upper - lower) / sma
            position = (df['close'] - lower) / (upper - lower)
            
            df[f'bb_upper_{period}'] = upper
            df[f'bb_middle_{period}'] = sma
            df[f'bb_lower_{period}'] = lower
            df[f'bb_bandwidth_{period}'] = bandwidth
            df[f'bb_position_{period}'] = position
            return df
        except:
            return df
    
    def _calculate_sma(self, df: pd.DataFrame, period: int) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç SMA."""
        try:
            sma = df['close'].rolling(window=period).mean()
            df[f'sma_{period}'] = sma
            df[f'price_to_sma_{period}'] = (df['close'] - sma) / sma
            return df
        except:
            return df
    
    def _calculate_ema(self, df: pd.DataFrame, period: int) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç EMA."""
        try:
            ema = df['close'].ewm(span=period).mean()
            df[f'ema_{period}'] = ema
            df[f'price_to_ema_{period}'] = (df['close'] - ema) / ema
            return df
        except:
            return df
    
    def _calculate_stochastic(self, df: pd.DataFrame, period: int = 14) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Stochastic Oscillator."""
        try:
            low_min = df['low'].rolling(window=period).min()
            high_max = df['high'].rolling(window=period).max()
            k_percent = 100 * ((df['close'] - low_min) / (high_max - low_min))
            d_percent = k_percent.rolling(window=3).mean()
            
            df[f'stoch_k_{period}'] = k_percent
            df[f'stoch_d_{period}'] = d_percent
            return df
        except:
            return df
    
    def _calculate_williams_r(self, df: pd.DataFrame, period: int = 14) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Williams %R."""
        try:
            low_min = df['low'].rolling(window=period).min()
            high_max = df['high'].rolling(window=period).max()
            williams_r = -100 * ((high_max - df['close']) / (high_max - low_min))
            df[f'williams_r_{period}'] = williams_r
            return df
        except:
            return df
    
    def _calculate_cci(self, df: pd.DataFrame, period: int = 20) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç CCI (Commodity Channel Index)."""
        try:
            typical_price = (df['high'] + df['low'] + df['close']) / 3
            sma_tp = typical_price.rolling(window=period).mean()
            mad = typical_price.rolling(window=period).apply(lambda x: np.mean(np.abs(x - x.mean())))
            cci = (typical_price - sma_tp) / (0.015 * mad)
            df[f'cci_{period}'] = cci
            return df
        except:
            return df
    
    def _calculate_adx(self, df: pd.DataFrame, period: int = 14) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç ADX (Average Directional Index)."""
        try:
            high_diff = df['high'].diff()
            low_diff = df['low'].diff()
            
            plus_dm = np.where((high_diff > low_diff) & (high_diff > 0), high_diff, 0)
            minus_dm = np.where((low_diff > high_diff) & (low_diff > 0), low_diff, 0)
            
            tr = np.maximum(
                df['high'] - df['low'],
                np.maximum(
                    np.abs(df['high'] - df['close'].shift(1)),
                    np.abs(df['low'] - df['close'].shift(1))
                )
            )
            
            plus_di = 100 * pd.Series(plus_dm).rolling(window=period).mean() / pd.Series(tr).rolling(window=period).mean()
            minus_di = 100 * pd.Series(minus_dm).rolling(window=period).mean() / pd.Series(tr).rolling(window=period).mean()
            
            dx = 100 * np.abs(plus_di - minus_di) / (plus_di + minus_di)
            adx = pd.Series(dx).rolling(window=period).mean()
            
            df[f'adx_{period}'] = adx
            df[f'plus_di_{period}'] = plus_di
            df[f'minus_di_{period}'] = minus_di
            return df
        except:
            return df
    
    def _calculate_atr(self, df: pd.DataFrame, period: int = 14) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç ATR (Average True Range)."""
        try:
            high_low = df['high'] - df['low']
            high_close = np.abs(df['high'] - df['close'].shift(1))
            low_close = np.abs(df['low'] - df['close'].shift(1))
            
            true_range = np.maximum(high_low, np.maximum(high_close, low_close))
            atr = true_range.rolling(window=period).mean()
            
            df[f'atr_{period}'] = atr
            return df
        except:
            return df
    
    def _calculate_obv(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç OBV (On-Balance Volume)."""
        try:
            obv = pd.Series(index=df.index, dtype=float)
            obv.iloc[0] = df['volume'].iloc[0]
            
            for i in range(1, len(df)):
                if df['close'].iloc[i] > df['close'].iloc[i-1]:
                    obv.iloc[i] = obv.iloc[i-1] + df['volume'].iloc[i]
                elif df['close'].iloc[i] < df['close'].iloc[i-1]:
                    obv.iloc[i] = obv.iloc[i-1] - df['volume'].iloc[i]
                else:
                    obv.iloc[i] = obv.iloc[i-1]
            
            df['obv'] = obv
            return df
        except:
            return df
    
    def _calculate_vwap(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç VWAP."""
        try:
            typical_price = (df['high'] + df['low'] + df['close']) / 3
            vwap = (typical_price * df['volume']).cumsum() / df['volume'].cumsum()
            df['vwap'] = vwap
            return df
        except:
            return df
    
    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –†–ê–°–ß–ï–¢–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í
    
    def _calculate_momentum(self, df: pd.DataFrame, period: int = 10) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Momentum (–ú–æ–º–µ–Ω—Ç—É–º)."""
        try:
            momentum = df['close'] - df['close'].shift(period)
            df[f'momentum_{period}'] = momentum
            return df
        except:
            return df
    
    def _calculate_ichimoku(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Ichimoku Cloud."""
        try:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Ichimoku
            tenkan_period = 9
            kijun_period = 26
            senkou_span_b_period = 52
            displacement = 26
            
            # Tenkan-sen (Conversion Line)
            tenkan_high = df['high'].rolling(window=tenkan_period).max()
            tenkan_low = df['low'].rolling(window=tenkan_period).min()
            tenkan_sen = (tenkan_high + tenkan_low) / 2
            
            # Kijun-sen (Base Line)
            kijun_high = df['high'].rolling(window=kijun_period).max()
            kijun_low = df['low'].rolling(window=kijun_period).min()
            kijun_sen = (kijun_high + kijun_low) / 2
            
            # Senkou Span A (Leading Span A)
            senkou_span_a = ((tenkan_sen + kijun_sen) / 2).shift(displacement)
            
            # Senkou Span B (Leading Span B)
            senkou_span_b_high = df['high'].rolling(window=senkou_span_b_period).max()
            senkou_span_b_low = df['low'].rolling(window=senkou_span_b_period).min()
            senkou_span_b = ((senkou_span_b_high + senkou_span_b_low) / 2).shift(displacement)
            
            # Chikou Span (Lagging Span)
            chikou_span = df['close'].shift(-displacement)
            
            df['ichimoku_tenkan'] = tenkan_sen
            df['ichimoku_kijun'] = kijun_sen
            df['ichimoku_senkou_a'] = senkou_span_a
            df['ichimoku_senkou_b'] = senkou_span_b
            df['ichimoku_chikou'] = chikou_span
            
            return df
        except:
            return df
    
    def _calculate_hull_ma(self, df: pd.DataFrame, period: int = 20) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Hull Moving Average."""
        try:
            # Hull MA = WMA(2*WMA(n/2) - WMA(n))
            half_period = period // 2
            sqrt_period = int(np.sqrt(period))
            
            # WMA(n/2)
            wma_half = df['close'].rolling(window=half_period).apply(
                lambda x: np.sum(x * np.arange(1, len(x) + 1)) / np.sum(np.arange(1, len(x) + 1))
            )
            
            # WMA(n)
            wma_full = df['close'].rolling(window=period).apply(
                lambda x: np.sum(x * np.arange(1, len(x) + 1)) / np.sum(np.arange(1, len(x) + 1))
            )
            
            # 2*WMA(n/2) - WMA(n)
            raw_hull = 2 * wma_half - wma_full
            
            # WMA(sqrt(n)) –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            hull_ma = raw_hull.rolling(window=sqrt_period).apply(
                lambda x: np.sum(x * np.arange(1, len(x) + 1)) / np.sum(np.arange(1, len(x) + 1))
            )
            
            df[f'hull_ma_{period}'] = hull_ma
            return df
        except:
            return df
    
    def _calculate_awesome_oscillator(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Awesome Oscillator (–ß—É–¥–µ—Å–Ω—ã–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä –ë–∏–ª–ª–∞ –í–∏–ª—å—è–º—Å–∞)."""
        try:
            # –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
            median_price = (df['high'] + df['low']) / 2
            
            # 5-–ø–µ—Ä–∏–æ–¥–Ω–∞—è SMA –º–µ–¥–∏–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã
            ao_fast = median_price.rolling(window=5).mean()
            
            # 34-–ø–µ—Ä–∏–æ–¥–Ω–∞—è SMA –º–µ–¥–∏–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã
            ao_slow = median_price.rolling(window=34).mean()
            
            # Awesome Oscillator = AO_fast - AO_slow
            awesome_oscillator = ao_fast - ao_slow
            
            df['awesome_oscillator'] = awesome_oscillator
            return df
        except:
            return df
    
    def _calculate_ultimate_oscillator(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Ultimate Oscillator."""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Ultimate Oscillator
            period1 = 7
            period2 = 14
            period3 = 28
            weight1 = 4.0
            weight2 = 2.0
            weight3 = 1.0
            
            # –†–∞—Å—á–µ—Ç True Range
            high_low = df['high'] - df['low']
            high_close = np.abs(df['high'] - df['close'].shift(1))
            low_close = np.abs(df['low'] - df['close'].shift(1))
            true_range = np.maximum(high_low, np.maximum(high_close, low_close))
            
            # –†–∞—Å—á–µ—Ç Buying Pressure (BP) –∏ True Range (TR)
            bp = df['close'] - np.minimum(df['low'], df['close'].shift(1))
            tr = true_range
            
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            avg_bp1 = bp.rolling(window=period1).mean()
            avg_tr1 = tr.rolling(window=period1).mean()
            avg_bp2 = bp.rolling(window=period2).mean()
            avg_tr2 = tr.rolling(window=period2).mean()
            avg_bp3 = bp.rolling(window=period3).mean()
            avg_tr3 = tr.rolling(window=period3).mean()
            
            # –†–∞—Å—á–µ—Ç Ultimate Oscillator
            uo1 = 100 * (avg_bp1 / avg_tr1)
            uo2 = 100 * (avg_bp2 / avg_tr2)
            uo3 = 100 * (avg_bp3 / avg_tr3)
            
            ultimate_oscillator = (weight1 * uo1 + weight2 * uo2 + weight3 * uo3) / (weight1 + weight2 + weight3)
            
            df['ultimate_oscillator'] = ultimate_oscillator
            return df
        except:
            return df
    
    def _calculate_bulls_bears_power(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Bulls Power & Bears Power."""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            period = 13
            
            # –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
            median_price = (df['high'] + df['low']) / 2
            
            # Bulls Power = High - EMA(median_price)
            ema_median = median_price.ewm(span=period).mean()
            bulls_power = df['high'] - ema_median
            
            # Bears Power = Low - EMA(median_price)
            bears_power = df['low'] - ema_median
            
            df['bulls_power'] = bulls_power
            df['bears_power'] = bears_power
            
            return df
        except:
            return df
    
    def _calculate_fast_stochastic_rsi(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç Fast Stochastic RSI."""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
            rsi_period = 14
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=rsi_period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=rsi_period).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            
            # –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º Stochastic –∫ RSI
            stoch_period = 14
            rsi_high = rsi.rolling(window=stoch_period).max()
            rsi_low = rsi.rolling(window=stoch_period).min()
            
            # Fast Stochastic RSI
            fast_stoch_rsi = 100 * (rsi - rsi_low) / (rsi_high - rsi_low)
            
            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (K% –∏ D%)
            k_period = 3
            d_period = 3
            
            k_percent = fast_stoch_rsi.rolling(window=k_period).mean()
            d_percent = k_percent.rolling(window=d_period).mean()
            
            df['fast_stoch_rsi_k'] = k_percent
            df['fast_stoch_rsi_d'] = d_percent
            
            return df
        except:
            return df 