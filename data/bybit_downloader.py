#!/usr/bin/env python3
"""
üìä Bybit Data Downloader for TimAI
–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit API
"""

import requests
import pandas as pd
import time
from datetime import datetime, timedelta
import os
import json

class BybitDataDownloader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å Bybit API"""
    
    def __init__(self):
        self.base_url = "https://api.bybit.com/v5/market/kline"
        self.intervals = {
            '5': '5',      # 5 –º–∏–Ω—É—Ç
            '15': '15',    # 15 –º–∏–Ω—É—Ç  
            '60': '60'     # 60 –º–∏–Ω—É—Ç (1 —á–∞—Å)
        }
        
    def download_klines(self, symbol: str, interval: str, days_back: int = 1825) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Bybit
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä BTCUSDT)
            interval: –¢–∞–π–º—Ñ—Ä–µ–π–º (5, 15, 60)
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –ª–µ—Ç = 1825 –¥–Ω–µ–π)
        """
        
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ {symbol} {interval}m –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        end_time = int(datetime.now().timestamp() * 1000)
        start_time = int((datetime.now() - timedelta(days=days_back)).timestamp() * 1000)
        
        all_data = []
        current_start = start_time
        
        # Bybit –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 1000 —Å–≤–µ—á–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å
        max_candles_per_request = 1000
        
        if interval == '5':
            time_per_candle = 5 * 60 * 1000  # 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        elif interval == '15': 
            time_per_candle = 15 * 60 * 1000  # 15 –º–∏–Ω—É—Ç
        elif interval == '60':
            time_per_candle = 60 * 60 * 1000  # 60 –º–∏–Ω—É—Ç
        
        chunk_time = max_candles_per_request * time_per_candle
        
        request_count = 0
        total_requests = int((end_time - start_time) / chunk_time) + 1
        
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è {total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API...")
        
        while current_start < end_time:
            current_end = min(current_start + chunk_time, end_time)
            
            params = {
                'category': 'spot',
                'symbol': symbol,
                'interval': interval,
                'start': current_start,
                'end': current_end,
                'limit': 1000
            }
            
            try:
                response = requests.get(self.base_url, params=params, timeout=30)
                response.raise_for_status()
                
                data = response.json()
                
                if data['retCode'] == 0 and 'result' in data and 'list' in data['result']:
                    klines = data['result']['list']
                    
                    if klines:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        for kline in klines:
                            # –§–æ—Ä–º–∞—Ç Bybit: [timestamp, open, high, low, close, volume, turnover]
                            all_data.append({
                                'timestamp': int(kline[0]),
                                'datetime': datetime.fromtimestamp(int(kline[0]) / 1000),
                                'open': float(kline[1]),
                                'high': float(kline[2]), 
                                'low': float(kline[3]),
                                'close': float(kline[4]),
                                'volume': float(kline[5]),
                                'turnover': float(kline[6]) if len(kline) > 6 else 0
                            })
                        
                        request_count += 1
                        if request_count % 10 == 0:
                            progress = (current_start - start_time) / (end_time - start_time) * 100
                            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({request_count}/{total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤)")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ–∫–Ω—É
                    current_start = current_end
                    
                else:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {data.get('retMsg', 'Unknown error')}")
                    break
                    
            except requests.exceptions.RequestException as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                break
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                break
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            time.sleep(0.1)
        
        if all_data:
            df = pd.DataFrame(all_data)
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df = df.sort_values('timestamp').reset_index(drop=True)
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            df = df.drop_duplicates(subset=['timestamp']).reset_index(drop=True)
            
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
            print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {df['datetime'].min()} - {df['datetime'].max()}")
            
            return df
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return pd.DataFrame()
    
    def save_data(self, df: pd.DataFrame, symbol: str, interval: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
        
        if df.empty:
            return ""
            
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        start_date = df['datetime'].min().strftime('%Y%m%d')
        end_date = df['datetime'].max().strftime('%Y%m%d') 
        filename = f"{symbol}_{interval}m_5years_{start_date}_{end_date}.csv"
        filepath = os.path.join("historical", filename)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("historical", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        df.to_csv(filepath, index=False)
        
        file_size = os.path.getsize(filepath) / (1024 * 1024)  # MB
        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath} ({file_size:.1f} MB)")
        
        return filepath
    
    def download_all_timeframes(self, symbol: str = "BTCUSDT") -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        
        print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è {symbol}")
        print("="*60)
        
        results = {}
        
        for interval_name, interval_code in self.intervals.items():
            print(f"\nüìä –¢–∞–π–º—Ñ—Ä–µ–π–º {interval_name} –º–∏–Ω—É—Ç:")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.download_klines(symbol, interval_code)
            
            if not df.empty:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                filepath = self.save_data(df, symbol, interval_name)
                results[f"{interval_name}m"] = {
                    'filepath': filepath,
                    'records': len(df),
                    'start_date': df['datetime'].min(),
                    'end_date': df['datetime'].max(),
                    'file_size_mb': os.path.getsize(filepath) / (1024 * 1024) if filepath else 0
                }
            else:
                results[f"{interval_name}m"] = {'error': 'Failed to download'}
        
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üìä TimAI Data Downloader - Bybit Historical Data")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    downloader = BybitDataDownloader()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    symbols = ["BTCUSDT", "ETHUSDT"]
    
    all_results = {}
    
    for symbol in symbols:
        print(f"\nüî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        results = downloader.download_all_timeframes(symbol)
        all_results[symbol] = results
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {symbol}:")
        for timeframe, data in results.items():
            if 'error' not in data:
                print(f"   ‚úÖ {timeframe}: {data['records']} –∑–∞–ø–∏—Å–µ–π, {data['file_size_mb']:.1f} MB")
            else:
                print(f"   ‚ùå {timeframe}: {data['error']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
    summary_file = "historical/download_summary.json"
    with open(summary_file, 'w') as f:
        json.dump(all_results, f, indent=2, default=str)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
    print("="*60)
    
    total_files = 0
    total_size = 0
    total_records = 0
    
    for symbol, timeframes in all_results.items():
        print(f"üî∏ {symbol}:")
        for tf, data in timeframes.items():
            if 'error' not in data:
                total_files += 1
                total_size += data['file_size_mb']
                total_records += data['records']
                print(f"   ‚úÖ {tf}: {data['records']:,} –∑–∞–ø–∏—Å–µ–π")
    
    print(f"\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"   üìÅ –§–∞–π–ª–æ–≤: {total_files}")
    print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {total_records:,}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {total_size:.1f} MB")
    print(f"   üìã –°–≤–æ–¥–∫–∞: {summary_file}")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print(f"\nüöÄ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
    print(f"   1. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: data/historical/")
    print(f"   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python core/timai_core.py")
    print(f"   3. –î–ª—è API: python api/trading_api.py")
    
    return all_results

if __name__ == "__main__":
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É data
    if not os.path.basename(os.getcwd()) == 'data':
        if os.path.exists('data'):
            os.chdir('data')
    
    results = main() 