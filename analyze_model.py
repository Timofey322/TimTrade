#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
"""

import pickle
import pandas as pd
import numpy as np
from pathlib import Path

def analyze_model():
    """–ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model_path = "models/improved_xgboost_BTC_USDT_latest.pkl"
        
        with open(model_path, 'rb') as f:
            model_data = pickle.load(f)
        
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
        print(f"   –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {model_data.get('is_trained', False)}")
        print(f"   –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {model_data.get('class_model') is not None}")
        print(f"   –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {model_data.get('reg_model') is not None}")
        print(f"   –ê–Ω—Å–∞–º–±–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(model_data.get('ensemble_class_models', []))}")
        print(f"   –ê–Ω—Å–∞–º–±–ª—å —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä–æ–≤: {len(model_data.get('ensemble_reg_models', []))}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        selected_features = model_data.get('selected_features')
        if selected_features:
            print(f"\nüéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ ({len(selected_features)}):")
            for i, feature in enumerate(selected_features[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   {i+1}. {feature}")
            if len(selected_features) > 10:
                print(f"   ... –∏ –µ—â–µ {len(selected_features) - 10} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        else:
            print("‚ùå –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–¥–µ–ª–∏")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        default_params = model_data.get('default_params', {})
        print(f"\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:")
        for key, value in default_params.items():
            print(f"   {key}: {value}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
        
        # –¢–µ—Å—Ç 1: –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        if selected_features:
            X_test1 = pd.DataFrame(np.random.randn(10, len(selected_features)), columns=selected_features)
            class_model = model_data.get('class_model')
            if class_model:
                pred1 = class_model.predict(X_test1)
                proba1 = class_model.predict_proba(X_test1)
                print(f"   –¢–µ—Å—Ç 1 (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏):")
                print(f"     –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {pred1}")
                print(f"     –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {np.unique(pred1)}")
                print(f"     –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {np.bincount(pred1)}")
                print(f"     –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(np.max(proba1, axis=1)):.3f}")
        
        # –¢–µ—Å—Ç 2: –î–∞–Ω–Ω—ã–µ —Å feature_0, feature_1 –∏ —Ç.–¥.
        X_test2 = pd.DataFrame(np.random.randn(10, 10), columns=[f'feature_{i}' for i in range(10)])
        if class_model:
            try:
                pred2 = class_model.predict(X_test2)
                proba2 = class_model.predict_proba(X_test2)
                print(f"   –¢–µ—Å—Ç 2 (feature_0, feature_1, ...):")
                print(f"     –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {pred2}")
                print(f"     –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {np.unique(pred2)}")
                print(f"     –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {np.bincount(pred2)}")
                print(f"     –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(np.max(proba2, axis=1)):.3f}")
            except Exception as e:
                print(f"   –¢–µ—Å—Ç 2: –û—à–∏–±–∫–∞ - {e}")
        
        # –¢–µ—Å—Ç 3: –î–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ (rsi, macd –∏ —Ç.–¥.)
        real_features = ['rsi_14', 'macd_line', 'bb_upper_20', 'sma_20', 'ema_12', 'volatility_20', 'volume', 'close', 'high', 'low']
        X_test3 = pd.DataFrame(np.random.randn(10, len(real_features)), columns=real_features)
        if class_model:
            try:
                pred3 = class_model.predict(X_test3)
                proba3 = class_model.predict_proba(X_test3)
                print(f"   –¢–µ—Å—Ç 3 (—Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏):")
                print(f"     –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {pred3}")
                print(f"     –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {np.unique(pred3)}")
                print(f"     –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {np.bincount(pred3)}")
                print(f"     –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(np.max(proba3, axis=1)):.3f}")
            except Exception as e:
                print(f"   –¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª–∏: {e}")
        return False

if __name__ == "__main__":
    analyze_model() 